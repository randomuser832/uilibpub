local Library = {}

Library.flags = {}
Library.windowCount = 0

-- Your services like TweenService, UserInputService
local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")

-- Helper function for click effect
local function ClickEffect(guiObject)
    local circle = Instance.new("ImageLabel")
    circle.Name = "ClickEffect"
    circle.Image = "rbxassetid://3926307971"
    circle.ImageRectOffset = Vector2.new(524, 764)
    circle.ImageRectSize = Vector2.new(36, 36)
    circle.BackgroundTransparency = 1
    circle.AnchorPoint = Vector2.new(0.5, 0.5)
    circle.Position = UDim2.new(0.5, 0, 0.5, 0)
    circle.Size = UDim2.new(0, 0, 0, 0)
    circle.ZIndex = guiObject.ZIndex + 1
    circle.Parent = guiObject

    local tweenInfo = TweenInfo.new(0.5, Enum.EasingStyle.Linear)
    local tweenSize = TweenService:Create(circle, tweenInfo, {Size = UDim2.new(1, 0, 1, 0), ImageTransparency = 1})
    tweenSize:Play()

    tweenSize.Completed:Connect(function()
        circle:Destroy()
    end)
end

-- Draggable window helper
local function Drag(gui)
    local dragging, dragInput, dragStart, startPos

    gui.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
            dragStart = input.Position
            startPos = gui.Position

            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragging = false
                end
            end)
        end
    end)

    gui.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement then
            dragInput = input
        end
    end)

    UserInputService.InputChanged:Connect(function(input)
        if input == dragInput and dragging then
            local delta = input.Position - dragStart
            gui.Position = UDim2.new(
                math.clamp(startPos.X.Scale, 0, 1),
                math.clamp(startPos.X.Offset + delta.X, 0, workspace.CurrentCamera.ViewportSize.X - gui.AbsoluteSize.X),
                math.clamp(startPos.Y.Scale, 0, 1),
                math.clamp(startPos.Y.Offset + delta.Y, 0, workspace.CurrentCamera.ViewportSize.Y - gui.AbsoluteSize.Y)
            )
        end
    end)
end

function Library:Window(title)
    self.windowCount = self.windowCount + 1

    -- Main frame
    local windowFrame = Instance.new("Frame")
    windowFrame.Name = "Window" .. self.windowCount
    windowFrame.BackgroundColor3 = Color3.fromRGB(43, 43, 43)
    windowFrame.BorderSizePixel = 0
    windowFrame.Position = UDim2.new(0, 25, 0, -30 + 36 * self.windowCount + 6 * self.windowCount)
    windowFrame.Size = UDim2.new(0, 212, 0, 36)
    windowFrame.ZIndex = 10
    windowFrame.Parent = game.CoreGui -- Or wherever you want it

    Drag(windowFrame)

    -- Header line with gradient
    local windowLine = Instance.new("Frame", windowFrame)
    windowLine.Name = "WindowLine"
    windowLine.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    windowLine.BorderSizePixel = 0
    windowLine.Position = UDim2.new(0, 0, 0, 34)
    windowLine.Size = UDim2.new(0, 212, 0, 2)

    local lineGradient = Instance.new("UIGradient", windowLine)
    lineGradient.Color = ColorSequence.new {
        ColorSequenceKeypoint.new(0.00, Color3.fromRGB(43, 43, 43)),
        ColorSequenceKeypoint.new(0.20, Color3.fromRGB(43, 43, 43)),
        ColorSequenceKeypoint.new(0.50, Color3.fromRGB(131, 132, 255)),
        ColorSequenceKeypoint.new(0.80, Color3.fromRGB(43, 43, 43)),
        ColorSequenceKeypoint.new(1.00, Color3.fromRGB(43, 43, 43))
    }

    -- Title label
    local header = Instance.new("TextLabel", windowFrame)
    header.Name = "Header"
    header.BackgroundTransparency = 1
    header.Position = UDim2.new(0, 0, 0, 0)
    header.Size = UDim2.new(0, 54, 0, 34)
    header.Font = Enum.Font.GothamSemibold
    header.Text = "   " .. tostring(title)
    header.TextColor3 = Color3.fromRGB(255, 255, 255)
    header.TextSize = 14
    header.TextXAlignment = Enum.TextXAlignment.Left

    -- Toggle button
    local toggleButton = Instance.new("TextButton", windowFrame)
    toggleButton.Name = "WindowToggle"
    toggleButton.BackgroundTransparency = 1
    toggleButton.Position = UDim2.new(0.835, 0, 0, 0)
    toggleButton.Size = UDim2.new(0, 34, 0, 34)
    toggleButton.Text = ""
    toggleButton.AutoButtonColor = false

    local toggleImage = Instance.new("ImageLabel", toggleButton)
    toggleImage.Name = "WindowToggleImg"
    toggleImage.AnchorPoint = Vector2.new(0.5, 0.5)
    toggleImage.BackgroundTransparency = 1
    toggleImage.Position = UDim2.new(0.5, 0, 0.5, 0)
    toggleImage.Size = UDim2.new(0, 18, 0, 18)
    toggleImage.Image = "rbxassetid://3926305904"
    toggleImage.ImageRectOffset = Vector2.new(524, 764)
    toggleImage.ImageRectSize = Vector2.new(36, 36)
    toggleImage.Rotation = 180

    -- Bottom content frame (where tabs go)
    local bottomFrame = Instance.new("Frame", windowFrame)
    bottomFrame.Name = "Bottom"
    bottomFrame.BackgroundColor3 = Color3.fromRGB(38, 38, 38)
    bottomFrame.BorderSizePixel = 0
    bottomFrame.ClipsDescendants = true
    bottomFrame.Position = UDim2.new(0, 0, 1, 0)
    bottomFrame.Size = UDim2.new(0, 212, 0, 0)

    local bottomLayout = Instance.new("UIListLayout", bottomFrame)
    bottomLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center
    bottomLayout.SortOrder = Enum.SortOrder.LayoutOrder
    bottomLayout.Padding = UDim.new(0, 4)

    -- Tab buttons container
    local tabButtonsFrame = Instance.new("Frame", bottomFrame)
    tabButtonsFrame.Name = "TabButtons"
    tabButtonsFrame.BackgroundTransparency = 1
    tabButtonsFrame.Size = UDim2.new(1, 0, 0, 36)
    tabButtonsFrame.ClipsDescendants = true

    local tabButtonsLayout = Instance.new("UIListLayout", tabButtonsFrame)
    tabButtonsLayout.FillDirection = Enum.FillDirection.Horizontal
    tabButtonsLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center
    tabButtonsLayout.SortOrder = Enum.SortOrder.LayoutOrder
    tabButtonsLayout.Padding = UDim.new(0, 6)

    local tabs = {}
    local currentTabContent = nil

    -- Resize bottom frame depending on current tab content size
    local function resizeBottom()
        if currentTabContent then
            local contentSize = currentTabContent.Layout.AbsoluteContentSize.Y
            local targetHeight = 36 + contentSize + 8 -- tab buttons + content + padding
            bottomFrame:TweenSize(UDim2.new(0, 212, 0, targetHeight), Enum.EasingDirection.InOut, Enum.EasingStyle.Sine, 0.25, true)
        end
    end

    -- Window toggle open/close logic
    local opened = false
    toggleButton.MouseButton1Click:Connect(function()
        if opened then
            bottomFrame:TweenSize(UDim2.new(0, 212, 0, 0), Enum.EasingDirection.InOut, Enum.EasingStyle.Sine, 0.25, true)
            TweenService:Create(toggleImage, TweenInfo.new(0.25), {Rotation = 180}):Play()
            opened = false
        else
            if currentTabContent then
                local contentSize = currentTabContent.Layout.AbsoluteContentSize.Y
                local targetHeight = 36 + contentSize + 8
                bottomFrame:TweenSize(UDim2.new(0, 212, 0, targetHeight), Enum.EasingDirection.InOut, Enum.EasingStyle.Sine, 0.25, true)
            else
                bottomFrame:TweenSize(UDim2.new(0, 212, 0, 36), Enum.EasingDirection.InOut, Enum.EasingStyle.Sine, 0.25, true)
            end
            TweenService:Create(toggleImage, TweenInfo.new(0.25), {Rotation = 0}):Play()
            opened = true
        end
    end)

    -- API to add tabs
    local windowAPI = {}

    function windowAPI:Tab(name)
        -- Create tab button
        local tabButton = Instance.new("TextButton")
        tabButton.Name = name .. "Button"
        tabButton.BackgroundColor3 = Color3.fromRGB(43, 43, 43)
        tabButton.BorderSizePixel = 0
        tabButton.Size = UDim2.new(0, 72, 1, 0)
        tabButton.Font = Enum.Font.GothamSemibold
        tabButton.Text = name
        tabButton.TextColor3 = Color3.new(1, 1, 1)
        tabButton.TextSize = 14
        tabButton.Parent = tabButtonsFrame
        tabButton.AutoButtonColor = false

        -- Tab content frame
        local tabContent = Instance.new("Frame", bottomFrame)
        tabContent.Name = name .. "Content"
        tabContent.BackgroundTransparency = 1
        tabContent.BorderSizePixel = 0
        tabContent.Position = UDim2.new(0, 0, 0, 36)
        tabContent.Size = UDim2.new(1, 0, 0, 0)
        tabContent.Visible = false
        tabContent.ClipsDescendants = true

        local contentLayout = Instance.new("UIListLayout", tabContent)
        contentLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center
        contentLayout.SortOrder = Enum.SortOrder.LayoutOrder
        contentLayout.Padding = UDim.new(0, 4)
        tabContent.Layout = contentLayout

        tabs[name] = tabContent

        local function activateTab()
            -- Hide previous tab content
            if currentTabContent then
                currentTabContent.Visible = false
                local prevButton = tabButtonsFrame:FindFirstChildWhichIsA("TextButton")
                for _, btn in pairs(tabButtonsFrame:GetChildren()) do
                    if btn:IsA("TextButton") then
                        btn.BackgroundColor3 = Color3.fromRGB(43, 43, 43)
                    end
                end
            end
            -- Show current tab content
            tabContent.Visible = true
            currentTabContent = tabContent

            -- Highlight this tab button
            tabButton.BackgroundColor3 = Color3.fromRGB(55, 55, 55)

            -- Resize bottom frame to fit content
            RunService.Heartbeat:Wait() -- Wait one frame for layout to update
            resizeBottom()

            -- Open bottom frame if closed
            if not opened then
                toggleButton.MouseButton1Click:Wait() -- wait user to toggle or just open manually
                bottomFrame.Size = UDim2.new(0, 212, 0, 36 + contentLayout.AbsoluteContentSize.Y + 8)
                opened = true
                TweenService:Create(toggleImage, TweenInfo.new(0.25), {Rotation = 0}):Play()
            end
        end

        tabButton.MouseButton1Click:Connect(function()
            activateTab()
        end)

        -- Auto activate first tab created
        if not currentTabContent then
            activateTab()
        end

        -- Return tab UI API for adding controls inside tab
        local tabAPI = {}

        function tabAPI:Label(text)
            local label = Instance.new("TextLabel")
            label.Name = "Label"
            label.BackgroundColor3 = Color3.fromRGB(43, 43, 43)
            label.BorderSizePixel = 0
            label.Size = UDim2.new(0, 203, 0, 26)
            label.Font = Enum.Font.GothamSemibold
            label.Text = text or ""
            label.TextColor3 = Color3.fromRGB(255, 255, 255)
            label.TextSize = 14
            label.TextWrapped = true
            label.Parent = tabContent
            return label
        end

        function tabAPI:Button(text, callback)
            local btn = Instance.new("TextButton")
            btn.Name = "Button"
            btn.BackgroundColor3 = Color3.fromRGB(131, 132, 255)
            btn.BorderSizePixel = 0
            btn.Size = UDim2.new(0, 203, 0, 26)
            btn.Font = Enum.Font.GothamSemibold
            btn.Text = text or ""
            btn.TextColor3 = Color3.fromRGB(255, 255, 255)
            btn.TextSize = 14
            btn.Parent = tabContent

            btn.MouseButton1Click:Connect(function()
                ClickEffect(btn)
                if callback then
                    callback()
                end
            end)
            return btn
        end

        function tabAPI:Toggle(text, flagName, callback)
            local frame = Instance.new("Frame")
            frame.Name = "Toggle"
            frame.BackgroundColor3 = Color3.fromRGB(43, 43, 43)
            frame.BorderSizePixel = 0
            frame.Size = UDim2.new(0, 203, 0, 26)
            frame.Parent = tabContent

            local label = Instance.new("TextLabel", frame)
            label.Name = "Label"
            label.BackgroundTransparency = 1
            label.Size = UDim2.new(1, -30, 1, 0)
            label.Position = UDim2.new(0, 5, 0, 0)
            label.Font = Enum.Font.GothamSemibold
            label.Text = text or ""
            label.TextColor3 = Color3.fromRGB(255, 255, 255)
            label.TextSize = 14
            label.TextXAlignment = Enum.TextXAlignment.Left

            local toggleBtn = Instance.new("TextButton", frame)
            toggleBtn.Name = "ToggleButton"
            toggleBtn.BackgroundColor3 = Color3.fromRGB(131, 132, 255)
            toggleBtn.BorderSizePixel = 0
            toggleBtn.Position = UDim2.new(1, -26, 0.5, -10)
            toggleBtn.Size = UDim2.new(0, 20, 0, 20)
            toggleBtn.AutoButtonColor = false

            local toggleIndicator = Instance.new("Frame", toggleBtn)
            toggleIndicator.Name = "Indicator"
            toggleIndicator.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
            toggleIndicator.BorderSizePixel = 0
            toggleIndicator.Size = UDim2.new(0, 12, 0, 12)
            toggleIndicator.Position = UDim2.new(0.5, -6, 0.5, -6)

            local toggled = false
            if flagName then
                Library.flags[flagName] = false
            end

            local function setToggle(state)
                toggled = state
                if toggled then
                    toggleIndicator.BackgroundColor3 = Color3.fromRGB(131, 132, 255)
                else
                    toggleIndicator.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                end
                if flagName then
                    Library.flags[flagName] = toggled
                end
                if callback then
                    callback(toggled)
                end
            end

            toggleBtn.MouseButton1Click:Connect(function()
                setToggle(not toggled)
                ClickEffect(toggleBtn)
            end)

            return frame
        end

        function tabAPI:Slider(text, min, max, default, flagName, callback)
            local sliderFrame = Instance.new("Frame")
            sliderFrame.Name = "Slider"
            sliderFrame.BackgroundColor3 = Color3.fromRGB(43, 43, 43)
            sliderFrame.BorderSizePixel = 0
            sliderFrame.Size = UDim2.new(0, 203, 0, 30)
            sliderFrame.Parent = tabContent

            local label = Instance.new("TextLabel", sliderFrame)
            label.Name = "Label"
            label.BackgroundTransparency = 1
            label.Position = UDim2.new(0, 5, 0, 0)
            label.Size = UDim2.new(1, -10, 0, 18)
            label.Font = Enum.Font.GothamSemibold
            label.Text = text or ""
            label.TextColor3 = Color3.fromRGB(255, 255, 255)
            label.TextSize = 14
            label.TextXAlignment = Enum.TextXAlignment.Left

            local sliderBar = Instance.new("Frame", sliderFrame)
            sliderBar.Name = "SliderBar"
            sliderBar.BackgroundColor3 = Color3.fromRGB(131, 132, 255)
            sliderBar.BorderSizePixel = 0
            sliderBar.Position = UDim2.new(0, 5, 0, 20)
            sliderBar.Size = UDim2.new(1, -10, 0, 6)
            sliderBar.ClipsDescendants = true

            local sliderFill = Instance.new("Frame", sliderBar)
            sliderFill.Name = "Fill"
            sliderFill.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
            sliderFill.Size = UDim2.new(0, 0, 1, 0)

            local valueLabel = Instance.new("TextLabel", sliderFrame)
            valueLabel.Name = "ValueLabel"
            valueLabel.BackgroundTransparency = 1
            valueLabel.Position = UDim2.new(0, 5, 0, 0)
            valueLabel.Size = UDim2.new(1, -10, 0, 18)
            valueLabel.Font = Enum.Font.GothamSemibold
            valueLabel.Text = tostring(default or min)
            valueLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
            valueLabel.TextSize = 14
            valueLabel.TextXAlignment = Enum.TextXAlignment.Right

            local dragging = false

            local function updateSlider(inputPosX)
                local relativeX = math.clamp(inputPosX - sliderBar.AbsolutePosition.X, 0, sliderBar.AbsoluteSize.X)
                local percent = relativeX / sliderBar.AbsoluteSize.X
                local value = math.floor(min + (max - min) * percent + 0.5)
                sliderFill.Size = UDim2.new(percent, 0, 1, 0)
                valueLabel.Text = tostring(value)
                if flagName then
                    Library.flags[flagName] = value
                end
                if callback then
                    callback(value)
                end
            end

            sliderBar.InputBegan:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 then
                    dragging = true
                    updateSlider(input.Position.X)
                    ClickEffect(sliderBar)
                end
            end)

            sliderBar.InputEnded:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 then
                    dragging = false
                end
            end)

            UserInputService.InputChanged:Connect(function(input)
                if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
                    updateSlider(input.Position.X)
                end
            end)

            -- Initialize slider fill
            local defaultPercent = ((default or min) - min) / (max - min)
            sliderFill.Size = UDim2.new(defaultPercent, 0, 1, 0)
            if flagName then
                Library.flags[flagName] = default or min
            end

            return sliderFrame
        end

        return tabAPI
    end

    return windowAPI
end

return Library
