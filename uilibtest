-- IreXion UI Library (All-in-One, Fixed & Improved)
local UserInputService = game:GetService("UserInputService")
local TweenService = game:GetService("TweenService")
local CoreGui = game:GetService("CoreGui")

local library = {}
library.theme = {
    MainColor = Color3.fromRGB(30, 30, 30),
    TabColor = Color3.fromRGB(20, 20, 20),
    SectionColor = Color3.fromRGB(40, 40, 40),
    AccentColor = Color3.fromRGB(0, 255, 0),
    FontColor = Color3.fromRGB(255, 255, 255),
    ToggleOn = Color3.fromRGB(0, 255, 0),
    ToggleOff = Color3.fromRGB(80, 80, 80),
}

-- Create main GUI container
local gui = Instance.new("ScreenGui")
gui.Name = "IreXionUILib"
gui.ResetOnSpawn = false
gui.Parent = CoreGui
gui.Enabled = true

-- Main Frame
local mainFrame = Instance.new("Frame")
mainFrame.Size = UDim2.new(0, 450, 0, 300)
mainFrame.Position = UDim2.new(0.5, -225, 0.5, -150)
mainFrame.BackgroundColor3 = library.theme.MainColor
mainFrame.BorderSizePixel = 0
mainFrame.Parent = gui
mainFrame.ClipsDescendants = true

local mainUICorner = Instance.new("UICorner")
mainUICorner.CornerRadius = UDim.new(0, 12)
mainUICorner.Parent = mainFrame

-- State for minimized or not
local isMinimized = false

-- Header
local header = Instance.new("Frame")
header.Size = UDim2.new(1, 0, 0, 30)
header.BackgroundColor3 = library.theme.TabColor
header.BorderSizePixel = 0
header.Parent = mainFrame

local headerUICorner = Instance.new("UICorner")
headerUICorner.CornerRadius = UDim.new(0, 12)
headerUICorner.Parent = header

local headerLabel = Instance.new("TextLabel")
headerLabel.Size = UDim2.new(1, -60, 1, 0)
headerLabel.Position = UDim2.new(0, 10, 0, 0)
headerLabel.BackgroundTransparency = 1
headerLabel.Text = "IreXion - UI Library"
headerLabel.TextColor3 = library.theme.FontColor
headerLabel.TextXAlignment = Enum.TextXAlignment.Left
headerLabel.Font = Enum.Font.SourceSansBold
headerLabel.TextSize = 18
headerLabel.Parent = header

local minimizeBtn = Instance.new("TextButton")
minimizeBtn.Size = UDim2.new(0, 50, 1, 0)
minimizeBtn.Position = UDim2.new(1, -50, 0, 0)
minimizeBtn.BackgroundColor3 = library.theme.TabColor
minimizeBtn.TextColor3 = library.theme.FontColor
minimizeBtn.Text = "â€”"
minimizeBtn.Font = Enum.Font.SourceSansBold
minimizeBtn.TextSize = 24
minimizeBtn.BorderSizePixel = 0
minimizeBtn.Parent = header

-- Side Tab List
local tabList = Instance.new("Frame")
tabList.Size = UDim2.new(0, 100, 1, -30)
tabList.Position = UDim2.new(0, 0, 0, 30)
tabList.BackgroundColor3 = library.theme.SectionColor
tabList.BorderSizePixel = 0
tabList.Parent = mainFrame

local tabListUICorner = Instance.new("UICorner")
tabListUICorner.CornerRadius = UDim.new(0, 12)
tabListUICorner.Parent = tabList

local tabListLayout = Instance.new("UIListLayout")
tabListLayout.Padding = UDim.new(0, 5)
tabListLayout.SortOrder = Enum.SortOrder.LayoutOrder
tabListLayout.Parent = tabList

-- Content Frame (holds tabs content)
local contentFrame = Instance.new("Frame")
contentFrame.Size = UDim2.new(1, -100, 1, -30)
contentFrame.Position = UDim2.new(0, 100, 0, 30)
contentFrame.BackgroundColor3 = library.theme.MainColor
contentFrame.BorderSizePixel = 0
contentFrame.ClipsDescendants = true
contentFrame.Parent = mainFrame

local contentUICorner = Instance.new("UICorner")
contentUICorner.CornerRadius = UDim.new(0, 12)
contentUICorner.Parent = contentFrame

local contentUIList = Instance.new("UIListLayout")
contentUIList.SortOrder = Enum.SortOrder.LayoutOrder
contentUIList.Parent = contentFrame

-- Notification Container (top-right corner)
local notificationContainer = Instance.new("Frame")
notificationContainer.AnchorPoint = Vector2.new(1, 0)
notificationContainer.Position = UDim2.new(1, -10, 0, 10)
notificationContainer.Size = UDim2.new(0, 250, 0, 0)
notificationContainer.BackgroundTransparency = 1
notificationContainer.Parent = gui

local notificationLayout = Instance.new("UIListLayout")
notificationLayout.SortOrder = Enum.SortOrder.LayoutOrder
notificationLayout.VerticalAlignment = Enum.VerticalAlignment.Top
notificationLayout.Padding = UDim.new(0, 5)
notificationLayout.Parent = notificationContainer

-- Internal tab tracking
local tabs = {}
local tabButtons = {}

-- Helper function: TweenSize for sliding tab transition
local function slideTab(oldTab, newTab)
    if oldTab then
        TweenService:Create(oldTab, TweenInfo.new(0.25, Enum.EasingStyle.Quad, Enum.EasingDirection.InOut),
            {Position = UDim2.new(-1, 0, 0, 0)}):Play()
        delay(0.25, function() oldTab.Visible = false end)
    end
    newTab.Position = UDim2.new(1, 0, 0, 0)
    newTab.Visible = true
    TweenService:Create(newTab, TweenInfo.new(0.25, Enum.EasingStyle.Quad, Enum.EasingDirection.InOut),
        {Position = UDim2.new(0, 0, 0, 0)}):Play()
end

-- Create Tab function
function library:CreateTab(name)
    local tabFrame = Instance.new("Frame")
    tabFrame.Name = name
    tabFrame.Size = UDim2.new(1, 0, 1, 0)
    tabFrame.Position = UDim2.new(1, 0, 0, 0)
    tabFrame.BackgroundTransparency = 1
    tabFrame.Visible = false
    tabFrame.Parent = contentFrame

    local padding = Instance.new("UIPadding")
    padding.PaddingTop = UDim.new(0, 10)
    padding.PaddingLeft = UDim.new(0, 10)
    padding.PaddingRight = UDim.new(0, 10)
    padding.PaddingBottom = UDim.new(0, 10)
    padding.Parent = tabFrame

    local layout = Instance.new("UIListLayout")
    layout.SortOrder = Enum.SortOrder.LayoutOrder
    layout.Padding = UDim.new(0, 6)
    layout.Parent = tabFrame

    local tabBtn = Instance.new("TextButton")
    tabBtn.Size = UDim2.new(1, 0, 0, 30)
    tabBtn.BackgroundColor3 = library.theme.TabColor
    tabBtn.TextColor3 = library.theme.FontColor
    tabBtn.Font = Enum.Font.SourceSans
    tabBtn.TextSize = 16
    tabBtn.Text = name
    tabBtn.BorderSizePixel = 0
    tabBtn.Parent = tabList

    tabs[#tabs + 1] = tabFrame
    tabButtons[#tabButtons + 1] = tabBtn

    tabBtn.MouseButton1Click:Connect(function()
        local currentTab = nil
        for _, t in ipairs(tabs) do
            if t.Visible then
                currentTab = t
                break
            end
        end
        if currentTab ~= tabFrame then
            slideTab(currentTab, tabFrame)
        end
    end)

    if #tabs == 1 then
        tabFrame.Visible = true
        tabFrame.Position = UDim2.new(0, 0, 0, 0)
    end

    return tabFrame
end

-- Create Label inside a tab
function library:CreateLabel(tab, text)
    local label = Instance.new("TextLabel")
    label.Size = UDim2.new(1, 0, 0, 20)
    label.BackgroundTransparency = 1
    label.Text = text
    label.TextColor3 = library.theme.FontColor
    label.Font = Enum.Font.SourceSans
    label.TextSize = 16
    label.TextXAlignment = Enum.TextXAlignment.Left
    label.Parent = tab
    return label
end

-- Create Button inside a tab
function library:CreateButton(tab, text, callback)
    local button = Instance.new("TextButton")
    button.Size = UDim2.new(1, 0, 0, 30)
    button.BackgroundColor3 = library.theme.SectionColor
    button.TextColor3 = library.theme.FontColor
    button.Font = Enum.Font.SourceSans
    button.TextSize = 16
    button.Text = text
    button.BorderSizePixel = 0
    button.Parent = tab
    if callback then
        button.MouseButton1Click:Connect(callback)
    end
    return button
end

-- Create Toggle Switch inside a tab
function library:CreateToggle(tab, text, default, callback)
    local container = Instance.new("Frame")
    container.Size = UDim2.new(1, 0, 0, 30)
    container.BackgroundTransparency = 1
    container.Parent = tab

    local label = Instance.new("TextLabel")
    label.Size = UDim2.new(1, -50, 1, 0)
    label.BackgroundTransparency = 1
    label.Text = text
    label.TextColor3 = library.theme.FontColor
    label.Font = Enum.Font.SourceSans
    label.TextSize = 16
    label.TextXAlignment = Enum.TextXAlignment.Left
    label.Parent = container

    -- Use TextButton instead of Frame for toggle background for Cursor support
    local toggle = Instance.new("TextButton")
    toggle.Size = UDim2.new(0, 40, 0, 20)
    toggle.BackgroundColor3 = default and library.theme.ToggleOn or library.theme.ToggleOff
    toggle.Position = UDim2.new(1, -45, 0, 5)
    toggle.BorderSizePixel = 0
    toggle.AutoButtonColor = false
    toggle.Parent = container
    toggle.ClipsDescendants = true

    local circle = Instance.new("Frame")
    circle.Size = UDim2.new(0, 16, 0, 16)
    circle.BackgroundColor3 = Color3.fromRGB(240, 240, 240)
    circle.Position = default and UDim2.new(1, -21, 0, 2) or UDim2.new(0, 2, 0, 2)
    circle.AnchorPoint = Vector2.new(0, 0)
    circle.BorderSizePixel = 0
    circle.Parent = toggle

    local toggled = default

    local function updateVisual()
        toggle.BackgroundColor3 = toggled and library.theme.ToggleOn or library.theme.ToggleOff
        local goalPos = toggled and UDim2.new(1, -21, 0, 2) or UDim2.new(0, 2, 0, 2)
        TweenService:Create(circle, TweenInfo.new(0.15, Enum.EasingStyle.Quad, Enum.EasingDirection.InOut), {Position = goalPos}):Play()
    end

    toggle.MouseButton1Click:Connect(function()
        toggled = not toggled
        updateVisual()
        if callback then callback(toggled) end
    end)

    updateVisual()

    return container
end

-- Create Slider inside a tab
function library:CreateSlider(tab, text, min, max, default, callback)
    local container = Instance.new("Frame")
    container.Size = UDim2.new(1, 0, 0, 40)
    container.BackgroundTransparency = 1
    container.Parent = tab

    local label = Instance.new("TextLabel")
    label.Size = UDim2.new(1, 0, 0, 14)
    label.BackgroundTransparency = 1
    label.Text = text .. ": " .. tostring(default)
    label.TextColor3 = library.theme.FontColor
    label.Font = Enum.Font.SourceSans
    label.TextSize = 14
    label.TextXAlignment = Enum.TextXAlignment.Left
    label.Parent = container

    local sliderBg = Instance.new("Frame")
    sliderBg.Size = UDim2.new(1, 0, 0, 14)
    sliderBg.Position = UDim2.new(0, 0, 0, 18)
    sliderBg.BackgroundColor3 = library.theme.SectionColor
    sliderBg.BorderSizePixel = 0
    sliderBg.Parent = container
    sliderBg.ClipsDescendants = true

    local sliderUICorner = Instance.new("UICorner")
    sliderUICorner.CornerRadius = UDim.new(0, 8)
    sliderUICorner.Parent = sliderBg

    -- Use TextButton for slider fill to support Cursor
    local sliderFill = Instance.new("TextButton")
    sliderFill.Size = UDim2.new((default - min) / (max - min), 0, 1, 0)
    sliderFill.BackgroundColor3 = library.theme.AccentColor
    sliderFill.BorderSizePixel = 0
    sliderFill.AutoButtonColor = false
    sliderFill.Parent = sliderBg

    local dragging = false

    local function updateValue(x)
        local relativeX = math.clamp(x - sliderBg.AbsolutePosition.X, 0, sliderBg.AbsoluteSize.X)
        local percent = relativeX / sliderBg.AbsoluteSize.X
        local value = math.floor(min + (max - min) * percent)
        sliderFill:TweenSize(UDim2.new(percent, 0, 1, 0), Enum.EasingDirection.Out, Enum.EasingStyle.Quad, 0.15, true)
        label.Text = text .. ": " .. tostring(value)
        if callback then callback(value) end
    end

    sliderBg.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
            updateValue(input.Position.X)
        end
    end)
    sliderBg.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = false
        end
    end)
    sliderBg.InputChanged:Connect(function(input)
        if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
            updateValue(input.Position.X)
        end
    end)

    sliderFill.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
            updateValue(input.Position.X)
        end
    end)
    sliderFill.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = false
        end
    end)
    sliderFill.InputChanged:Connect(function(input)
        if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
            updateValue(input.Position.X)
        end
    end)

    -- Initialize slider fill size
    sliderFill.Size = UDim2.new((default - min) / (max - min), 0, 1, 0)

    return container
end

-- Create Input Box (supports text and numbers)
function library:CreateInputBox(tab, text, default, callback, numberOnly)
    local container = Instance.new("Frame")
    container.Size = UDim2.new(1, 0, 0, 40)
    container.BackgroundTransparency = 1
    container.Parent = tab

    local label = Instance.new("TextLabel")
    label.Size = UDim2.new(1, -10, 0, 14)
    label.BackgroundTransparency = 1
    label.Text = text
    label.TextColor3 = library.theme.FontColor
    label.Font = Enum.Font.SourceSans
    label.TextSize = 14
    label.TextXAlignment = Enum.TextXAlignment.Left
    label.Parent = container

    local inputBox = Instance.new("TextBox")
    inputBox.Size = UDim2.new(1, 0, 0, 22)
    inputBox.Position = UDim2.new(0, 0, 0, 18)
    inputBox.BackgroundColor3 = library.theme.SectionColor
    inputBox.TextColor3 = library.theme.FontColor
    inputBox.Text = tostring(default or "")
    inputBox.Font = Enum.Font.SourceSans
    inputBox.TextSize = 16
    inputBox.ClearTextOnFocus = false
    inputBox.Parent = container
    inputBox.BorderSizePixel = 0

    local inputUICorner = Instance.new("UICorner")
    inputUICorner.CornerRadius = UDim.new(0, 6)
    inputUICorner.Parent = inputBox

    inputBox.FocusLost:Connect(function(enterPressed)
        if enterPressed then
            local val = inputBox.Text
            if numberOnly then
                val = tonumber(val)
                if not val then
                    inputBox.Text = tostring(default or "")
                    return
                end
            end
            if callback then callback(val) end
        end
    end)

    return container
end

-- Create Dropdown menu
function library:CreateDropdown(tab, text, options, default, callback)
    local container = Instance.new("Frame")
    container.Size = UDim2.new(1, 0, 0, 40)
    container.BackgroundTransparency = 1
    container.Parent = tab

    local label = Instance.new("TextLabel")
    label.Size = UDim2.new(1, -10, 0, 14)
    label.BackgroundTransparency = 1
    label.Text = text
    label.TextColor3 = library.theme.FontColor
    label.Font = Enum.Font.SourceSans
    label.TextSize = 14
    label.TextXAlignment = Enum.TextXAlignment.Left
    label.Parent = container

    local dropdownBtn = Instance.new("TextButton")
    dropdownBtn.Size = UDim2.new(1, 0, 0, 22)
    dropdownBtn.Position = UDim2.new(0, 0, 0, 18)
    dropdownBtn.BackgroundColor3 = library.theme.SectionColor
    dropdownBtn.TextColor3 = library.theme.FontColor
    dropdownBtn.Text = default or "Select..."
    dropdownBtn.Font = Enum.Font.SourceSans
    dropdownBtn.TextSize = 16
    dropdownBtn.BorderSizePixel = 0
    dropdownBtn.AutoButtonColor = false
    dropdownBtn.Parent = container

    local dropdownUICorner = Instance.new("UICorner")
    dropdownUICorner.CornerRadius = UDim.new(0, 6)
    dropdownUICorner.Parent = dropdownBtn

    local dropdownOpen = false
    local dropdownList = Instance.new("Frame")
    dropdownList.Size = UDim2.new(1, 0, 0, 0)
    dropdownList.Position = UDim2.new(0, 0, 1, 2)
    dropdownList.BackgroundColor3 = library.theme.SectionColor
    dropdownList.BorderSizePixel = 0
    dropdownList.ClipsDescendants = true
    dropdownList.Parent = container

    local dropdownLayout = Instance.new("UIListLayout")
    dropdownLayout.SortOrder = Enum.SortOrder.LayoutOrder
    dropdownLayout.Padding = UDim.new(0, 3)
    dropdownLayout.Parent = dropdownList

    -- Populate dropdown options
    for _, option in ipairs(options) do
        local optionBtn = Instance.new("TextButton")
        optionBtn.Size = UDim2.new(1, 0, 0, 25)
        optionBtn.BackgroundColor3 = library.theme.TabColor
        optionBtn.TextColor3 = library.theme.FontColor
        optionBtn.Text = option
        optionBtn.Font = Enum.Font.SourceSans
        optionBtn.TextSize = 16
        optionBtn.BorderSizePixel = 0
        optionBtn.Parent = dropdownList

        optionBtn.MouseButton1Click:Connect(function()
            dropdownBtn.Text = option
            if callback then
                callback(option)
            end
            -- Close dropdown
            dropdownOpen = false
            TweenService:Create(dropdownList, TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {Size = UDim2.new(1, 0, 0, 0)}):Play()
        end)
    end

    dropdownBtn.MouseButton1Click:Connect(function()
        dropdownOpen = not dropdownOpen
        if dropdownOpen then
            local targetHeight = math.min(#options * 28, 150)
            TweenService:Create(dropdownList, TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {Size = UDim2.new(1, 0, 0, targetHeight)}):Play()
        else
            TweenService:Create(dropdownList, TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {Size = UDim2.new(1, 0, 0, 0)}):Play()
        end
    end)

    return container
end

-- Minimize button functionality: collapses mainFrame height to header only
minimizeBtn.MouseButton1Click:Connect(function()
    if isMinimized then
        -- Restore size
        TweenService:Create(mainFrame, TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {Size = UDim2.new(0, 450, 0, 300)}):Play()
        isMinimized = false
    else
        -- Minimize to header only
        TweenService:Create(mainFrame, TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {Size = UDim2.new(0, 450, 0, 30)}):Play()
        isMinimized = true
    end
end)

-- Notification function
function library:Notify(text, duration)
    duration = duration or 4
    local notification = Instance.new("Frame")
    notification.Size = UDim2.new(1, 0, 0, 50)
    notification.BackgroundColor3 = library.theme.SectionColor
    notification.BorderSizePixel = 0
    notification.Parent = notificationContainer

    local notificationUICorner = Instance.new("UICorner")
    notificationUICorner.CornerRadius = UDim.new(0, 12)
    notificationUICorner.Parent = notification

    local notificationLabel = Instance.new("TextLabel")
    notificationLabel.Size = UDim2.new(1, -10, 1, 0)
    notificationLabel.Position = UDim2.new(0, 10, 0, 0)
    notificationLabel.BackgroundTransparency = 1
    notificationLabel.Text = text
    notificationLabel.TextColor3 = library.theme.FontColor
    notificationLabel.Font = Enum.Font.SourceSans
    notificationLabel.TextSize = 16
    notificationLabel.TextWrapped = true
    notificationLabel.TextXAlignment = Enum.TextXAlignment.Left
    notificationLabel.Parent = notification

    -- Animate appearing
    notification.Size = UDim2.new(1, 0, 0, 0)
    TweenService:Create(notification, TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {Size = UDim2.new(1, 0, 0, 50)}):Play()

    delay(duration, function()
        TweenService:Create(notification, TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {Size = UDim2.new(1, 0, 0, 0)}):Play()
        wait(0.3)
        notification:Destroy()
    end)
end

return library
