local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local HttpService = game:GetService("HttpService")

local localPlayer = Players.LocalPlayer
local mouse = localPlayer:GetMouse()

-- Table to hold windows and flags (same as your 'a' table)
local UI = {
    windowCount = 0,
    flags = {}
}

-- A metatable that lets us access game services by name easily (like your 'b')
local services = setmetatable({}, {
    __index = function(_, serviceName)
        return game:GetService(serviceName)
    end,
    __newindex = function(_, key)
        -- Prevent setting new keys on services table
        return
    end
})

-- Track the currently dragged window
local draggedWindow

-- Make any frame draggable by mouse (like your Drag function)
local function makeDraggable(frame, dragHandle)
    dragHandle = dragHandle or frame -- If no dragHandle provided, use frame itself

    local dragging = false
    local dragStartPos
    local frameStartPos

    dragHandle.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
            dragStartPos = input.Position
            frameStartPos = frame.Position

            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragging = false
                end
            end)
        end
    end)

    dragHandle.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement then
            local connection
            connection = UserInputService.InputChanged:Connect(function(moveInput)
                if moveInput == input and dragging then
                    local delta = moveInput.Position - dragStartPos
                    frame.Position = UDim2.new(
                        frameStartPos.X.Scale,
                        frameStartPos.X.Offset + delta.X,
                        frameStartPos.Y.Scale,
                        frameStartPos.Y.Offset + delta.Y
                    )
                elseif not dragging then
                    connection:Disconnect()
                end
            end)
        end
    end)
end

-- Visual click ripple effect (your ClickEffect function)
local function clickEffect(parent)
    spawn(function()
        if not parent.ClipsDescendants then
            parent.ClipsDescendants = true
        end
        local ripple = Instance.new("ImageLabel")
        ripple.Name = "Ripple"
        ripple.Parent = parent
        ripple.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
        ripple.BackgroundTransparency = 1
        ripple.ZIndex = 8
        ripple.Image = "rbxassetid://2708891598"
        ripple.ImageTransparency = 0.8
        ripple.ScaleType = Enum.ScaleType.Fit
        ripple.ImageColor3 = Color3.fromRGB(131, 132, 255)

        -- Position ripple at mouse relative to parent
        ripple.Position = UDim2.new(
            (mouse.X - ripple.AbsolutePosition.X) / parent.AbsoluteSize.X,
            0,
            (mouse.Y - ripple.AbsolutePosition.Y) / parent.AbsoluteSize.Y,
            0
        )

        -- Animate ripple expanding
        TweenService:Create(
            ripple,
            TweenInfo.new(1),
            {Position = UDim2.new(-5.5, 0, -5.5, 0), Size = UDim2.new(12, 0, 12, 0)}
        ):Play()

        wait(0.25)

        -- Animate ripple fading out
        TweenService:Create(ripple, TweenInfo.new(0.5), {ImageTransparency = 1}):Play()

        repeat wait() until ripple.ImageTransparency == 1
        ripple:Destroy()
    end)
end

-- Create the main ScreenGui container
local screenGui = Instance.new("ScreenGui")
screenGui.Name = HttpService:GenerateGUID()
if RunService:IsStudio() then
    screenGui.Parent = localPlayer:WaitForChild("PlayerGui")
else
    screenGui.Parent = game:GetService("CoreGui")
end

-- Toggle GUI visibility with LeftShift key
UserInputService.InputBegan:Connect(function(input, gameProcessed)
    if input.KeyCode == Enum.KeyCode.LeftShift and not gameProcessed then
        screenGui.Enabled = not screenGui.Enabled
    end
end)

-- Create a new window (your a:Window function)
function UI:Window(windowTitle)
    local windowOpen = false
    self.windowCount += 1

    -- Top bar frame of window
    local topFrame = Instance.new("Frame")
    topFrame.Name = "Top"
    topFrame.Parent = screenGui
    topFrame.BackgroundColor3 = Color3.fromRGB(43, 43, 43)
    topFrame.BorderSizePixel = 0
    topFrame.Position = UDim2.new(0, 25, 0, -30 + 36 * self.windowCount + 6 * self.windowCount)
    topFrame.Size = UDim2.new(0, 212, 0, 36)

    makeDraggable(topFrame)

    -- Window line under top bar
    local windowLine = Instance.new("Frame")
    windowLine.Name = "WindowLine"
    windowLine.Parent = topFrame
    windowLine.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    windowLine.BorderSizePixel = 0
    windowLine.Position = UDim2.new(0, 0, 0, 34)
    windowLine.Size = UDim2.new(0, 212, 0, 2)

    local gradient = Instance.new("UIGradient")
    gradient.Name = "WindowLineGradient"
    gradient.Parent = windowLine
    gradient.Color = ColorSequence.new {
        ColorSequenceKeypoint.new(0.00, Color3.fromRGB(43, 43, 43)),
        ColorSequenceKeypoint.new(0.20, Color3.fromRGB(43, 43, 43)),
        ColorSequenceKeypoint.new(0.50, Color3.fromRGB(131, 132, 255)),
        ColorSequenceKeypoint.new(0.80, Color3.fromRGB(43, 43, 43)),
        ColorSequenceKeypoint.new(1.00, Color3.fromRGB(43, 43, 43))
    }

    -- Header text label
    local headerLabel = Instance.new("TextLabel")
    headerLabel.Name = "Header"
    headerLabel.Parent = topFrame
    headerLabel.BackgroundTransparency = 1
    headerLabel.BorderSizePixel = 0
    headerLabel.Size = UDim2.new(0, 54, 0, 34)
    headerLabel.Font = Enum.Font.GothamSemibold
    headerLabel.Text = "   " .. tostring(windowTitle or "")
    headerLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    headerLabel.TextSize = 14
    headerLabel.TextXAlignment = Enum.TextXAlignment.Left

    -- Toggle button to open/close bottom frame
    local toggleButton = Instance.new("TextButton")
    toggleButton.Name = "WindowToggle"
    toggleButton.Parent = topFrame
    toggleButton.BackgroundTransparency = 1
    toggleButton.BorderSizePixel = 0
    toggleButton.Position = UDim2.new(0.835, 0, 0, 0)
    toggleButton.Size = UDim2.new(0, 34, 0, 34)
    toggleButton.Text = ""
    toggleButton.TextColor3 = Color3.fromRGB(0, 0, 0)
    toggleButton.Font = Enum.Font.SourceSans
    toggleButton.TextSize = 14

    -- Toggle button image (arrow)
    local toggleImg = Instance.new("ImageLabel")
    toggleImg.Name = "WindowToggleImg"
    toggleImg.Parent = toggleButton
    toggleImg.AnchorPoint = Vector2.new(0.5, 0.5)
    toggleImg.BackgroundTransparency = 1
    toggleImg.BorderSizePixel = 0
    toggleImg.Position = UDim2.new(0.5, 0, 0.5, 0)
    toggleImg.Size = UDim2.new(0, 18, 0, 18)
    toggleImg.Image = "rbxassetid://3926305904"
    toggleImg.ImageRectOffset = Vector2.new(524, 764)
    toggleImg.ImageRectSize = Vector2.new(36, 36)
    toggleImg.Rotation = 180 -- arrow pointing down initially

    -- Bottom frame to hold content, starts collapsed (height 0)
    local bottomFrame = Instance.new("Frame")
    bottomFrame.Name = "Bottom"
    bottomFrame.Parent = topFrame
    bottomFrame.BackgroundColor3 = Color3.fromRGB(38, 38, 38)
    bottomFrame.BorderSizePixel = 0
    bottomFrame.ClipsDescendants = true
    bottomFrame.Position = UDim2.new(0, 0, 1, 0) -- below topFrame
    bottomFrame.Size = UDim2.new(0, 212, 0, 0)

    -- UIListLayout to layout elements inside bottomFrame
    local bottomLayout = Instance.new("UIListLayout")
    bottomLayout.Name = "BottomLayout"
    bottomLayout.Parent = bottomFrame
    bottomLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center
    bottomLayout.SortOrder = Enum.SortOrder.LayoutOrder
    bottomLayout.Padding = UDim.new(0, 4)

    -- Padding frame (for spacing)
    local paddingThing = Instance.new("Frame")
    paddingThing.Name = "PaddingThing"
    paddingThing.Parent = bottomFrame
    paddingThing.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    paddingThing.BorderSizePixel = 0
    paddingThing.Position = UDim2.new(0.263, 0, 0, 0)
    paddingThing.Size = UDim2.new(0, 100, 0, 0)

    local isAnimating = false

    -- Toggle function to expand/collapse bottomFrame
    local function toggleWindow()
        if isAnimating then return end
        windowOpen = not windowOpen
        isAnimating = true

        TweenService:Create(
            bottomFrame,
            TweenInfo.new(0.25, Enum.EasingStyle.Sine, Enum.EasingDirection.InOut),
            {Size = UDim2.new(0, 212, 0, windowOpen and bottomLayout.AbsoluteContentSize.Y + 4 or 0)}
        ):Play()

        TweenService:Create(
            toggleImg,
            TweenInfo.new(0.25, Enum.EasingStyle.Sine, Enum.EasingDirection.InOut),
            {Rotation = windowOpen and 0 or 180}
        ):Play()

        wait(0.25)
        isAnimating = false
    end

    -- Keep bottomFrame size updated if content changes while expanded
    local function updateSize()
        if isAnimating or not windowOpen then return end
        bottomFrame.Size = UDim2.new(0, 212, 0, bottomLayout.AbsoluteContentSize.Y + 4)
    end

    bottomLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(updateSize)

    toggleButton.MouseButton1Click:Connect(function()
        toggleWindow()
        clickEffect(toggleButton)
    end)

    -- Helper object to create UI elements inside window bottomFrame
    local elements = {}

    -- Label creator function
    function elements:Label(text)
        local label = Instance.new("TextButton")
        label.Name = "Label"
        label.Parent = bottomFrame
        label.BackgroundColor3 = Color3.fromRGB(43, 43, 43)
        label.BorderSizePixel = 0
        label.Size = UDim2.new(0, 203, 0, 26)
        label.AutoButtonColor = false
        label.Font = Enum.Font.GothamSemibold
        label.Text = tostring(text or "")
        label.TextColor3 = Color3.fromRGB(255, 255, 255)
        label.TextSize = 14
        return label
    end

    -- Button creator function
    function elements:Button(text, callback)
        local callback = callback or function() end

        local container = Instance.new("Frame")
        container.Name = "ButtonObj"
        container.Parent = bottomFrame
        container.BackgroundColor3 = Color3.fromRGB(43, 43, 43)
        container.BorderSizePixel = 0
        container.Size = UDim2.new(0, 203, 0, 36)

        local button = Instance.new("TextButton")
        button.Name = "Button"
        button.Parent = container
        button.BackgroundTransparency = 1
        button.BorderSizePixel = 0
        button.Size = UDim2.new(1, 0, 1, 0)
        button.Font = Enum.Font.Gotham
        button.Text = "  " .. tostring(text or "")
        button.TextColor3 = Color3.fromRGB(255, 255, 255)
        button.TextSize = 14
        button.TextXAlignment = Enum.TextXAlignment.Left

        button.MouseEnter:Connect(function()
            TweenService:Create(
                container,
                TweenInfo.new(0.25, Enum.EasingStyle.Sine, Enum.EasingDirection.InOut),
                {BackgroundColor3 = Color3.fromRGB(55, 55, 55)}
            ):Play()
        end)

        button.MouseLeave:Connect(function()
            TweenService:Create(
                container,
                TweenInfo.new(0.25, Enum.EasingStyle.Sine, Enum.EasingDirection.InOut),
                {BackgroundColor3 = Color3.fromRGB(43, 43, 43)}
            ):Play()
        end)

        button.MouseButton1Click:Connect(function()
            spawn(function()
                clickEffect(button)
            end)
            callback()
        end)

        return container
    end

    -- Toggle creator function
    function elements:Toggle(labelText, flagKey, defaultValue, onToggleCallback, flagsTable)
        local flagsTable = flagsTable or UI.flags
        local flagKey = flagKey or HttpService:GenerateGUID()
        local defaultValue = defaultValue or false
        local onToggleCallback = onToggleCallback or function() end
        flagsTable[flagKey] = defaultValue

        local container = Instance.new("Frame")
        container.Name = "ToggleObj"
        container.Parent = bottomFrame
        container.BackgroundColor3 = Color3.fromRGB(43, 43, 43)
        container.BorderSizePixel = 0
        container.Size = UDim2.new(0, 203, 0, 36)

        local label = Instance.new("TextButton")
        label.Name = "ToggleText"
        label.Parent = container
        label.BackgroundTransparency = 1
        label.BorderSizePixel = 0
        label.Size = UDim2.new(1, 0, 1, 0)
        label.Font = Enum.Font.Gotham
        label.Text = "  " .. tostring(labelText or "")
        label.TextColor3 = Color3.fromRGB(255, 255, 255)
        label.TextSize = 14
        label.TextXAlignment = Enum.TextXAlignment.Left

        local statusBox = Instance.new("Frame")
        statusBox.Name = "ToggleStatus"
        statusBox.Parent = container
        statusBox.AnchorPoint = Vector2.new(0, 0.5)
        statusBox.BackgroundColor3 = defaultValue and Color3.fromRGB(14, 255, 110) or Color3.fromRGB(255, 44, 44)
        statusBox.BorderSizePixel = 0
        statusBox.Position = UDim2.new(0.847, 0, 0.5, 0)
        statusBox.Size = UDim2.new(0, 24, 0, 24)

        local statusRound = Instance.new("UICorner")
        statusRound.CornerRadius = UDim.new(0, 4)
        statusRound.Name = "ToggleStatusRound"
        statusRound.Parent = statusBox

        if defaultValue then
            onToggleCallback(true)
        end

        label.MouseEnter:Connect(function()
            TweenService:Create(
                container,
                TweenInfo.new(0.25, Enum.EasingStyle.Sine, Enum.EasingDirection.InOut),
                {BackgroundColor3 = Color3.fromRGB(55, 55, 55)}
            ):Play()
        end)

        label.MouseLeave:Connect(function()
            TweenService:Create(
                container,
                TweenInfo.new(0.25, Enum.EasingStyle.Sine, Enum.EasingDirection.InOut),
                {BackgroundColor3 = Color3.fromRGB(43, 43, 43)}
            ):Play()
        end)

        label.MouseButton1Click:Connect(function()
            flagsTable[flagKey] = not flagsTable[flagKey]

            spawn(function()
                TweenService:Create(
                    statusBox,
                    TweenInfo.new(0.25, Enum.EasingStyle.Sine, Enum.EasingDirection.InOut),
                    {BackgroundColor3 = flagsTable[flagKey] and Color3.fromRGB(14, 255, 110) or Color3.fromRGB(255, 44, 44)}
                ):Play()
            end)

            spawn(function()
                clickEffect(label)
            end)

            onToggleCallback(flagsTable[flagKey])
        end)

        return container
    end

    -- Slider creator function
    function elements:Slider(labelText, flagKey, minValue, maxValue, onChangeCallback, defaultValue, flagsTable)
        local minValue = minValue or 0
        local maxValue = maxValue or 100
        local flagKey = flagKey or HttpService:GenerateGUID()
        local onChangeCallback = onChangeCallback or function() end
        local flagsTable = flagsTable or UI.flags
        local currentValue = defaultValue or minValue

        flagsTable[flagKey] = currentValue

        local dragging = false

        local container = Instance.new("Frame")
        container.Name = "SliderObj"
        container.Parent = bottomFrame
        container.BackgroundColor3 = Color3.fromRGB(43, 43, 43)
        container.BorderSizePixel = 0
        container.Size = UDim2.new(0, 203, 0, 36)

        local labelButton = Instance.new("TextButton")
        labelButton.Name = "SliderText"
        labelButton.Parent = container
        labelButton.BackgroundTransparency = 1
        labelButton.BorderSizePixel = 0
        labelButton.Size = UDim2.new(1, 0, 1, 0)
        labelButton.Font = Enum.Font.Gotham
        labelButton.Text = "  " .. tostring(labelText or "")
        labelButton.TextColor3 = Color3.fromRGB(255, 255, 255)
        labelButton.TextSize = 14
        labelButton.TextXAlignment = Enum.TextXAlignment.Left

        local barBack = Instance.new("Frame")
        barBack.Name = "BarBack"
        barBack.Parent = container
        barBack.AnchorPoint = Vector2.new(1, 0.5)
        barBack.BackgroundColor3 = Color3.fromRGB(38, 38, 38)
        barBack.BorderSizePixel = 0
        barBack.Position = UDim2.new(0.89, 0, 0.5, 0)
        barBack.Size = UDim2.new(0, 120, 0, 10)

        local barBackRound = Instance.new("UICorner")
        barBackRound.CornerRadius = UDim.new(0, 5)
        barBackRound.Name = "BarBackRound"
        barBackRound.Parent = barBack

        local barFill = Instance.new("Frame")
        barFill.Name = "BarFill"
        barFill.Parent = barBack
        barFill.BackgroundColor3 = Color3.fromRGB(131, 133, 255)
        barFill.BorderSizePixel = 0
        barFill.Size = UDim2.new((currentValue - minValue) / (maxValue - minValue), 0, 1, 0)

        local barFillRound = Instance.new("UICorner")
        barFillRound.CornerRadius = UDim.new(0, 5)
        barFillRound.Name = "BarFillRound"
        barFillRound.Parent = barFill

        local valueLabel = Instance.new("TextLabel")
        valueLabel.Name = "ValueLabel"
        valueLabel.Parent = barBack
        valueLabel.AnchorPoint = Vector2.new(0, 0.5)
        valueLabel.BackgroundTransparency = 1
        valueLabel.Position = UDim2.new(1.15, 0, 0.5, 0)
        valueLabel.Size = UDim2.new(0, 40, 0, 20)
        valueLabel.Font = Enum.Font.GothamSemibold
        valueLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
        valueLabel.TextSize = 14
        valueLabel.TextXAlignment = Enum.TextXAlignment.Left
        valueLabel.Text = tostring(currentValue)

        local function updateSlider(newValue)
            newValue = math.clamp(newValue, minValue, maxValue)
            flagsTable[flagKey] = newValue
            currentValue = newValue
            valueLabel.Text = tostring(math.floor(newValue))
            barFill.Size = UDim2.new((newValue - minValue) / (maxValue - minValue), 0, 1, 0)
            onChangeCallback(newValue)
        end

        barBack.InputBegan:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 then
                dragging = true
                local relativeX = math.clamp(input.Position.X - barBack.AbsolutePosition.X, 0, barBack.AbsoluteSize.X)
                local value = (relativeX / barBack.AbsoluteSize.X) * (maxValue - minValue) + minValue
                updateSlider(value)
            end
        end)

        barBack.InputEnded:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 then
                dragging = false
            end
        end)

        UserInputService.InputChanged:Connect(function(input)
            if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
                local relativeX = math.clamp(input.Position.X - barBack.AbsolutePosition.X, 0, barBack.AbsoluteSize.X)
                local value = (relativeX / barBack.AbsoluteSize.X) * (maxValue - minValue) + minValue
                updateSlider(value)
            end
        end)

        return container
    end

    return elements
end

return UI
