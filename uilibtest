local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local HttpService = game:GetService("HttpService")

local LocalPlayer = Players.LocalPlayer
local Mouse = LocalPlayer:GetMouse()

local UIManager = {
    windowCount = 0,
    flags = {}
}

-- Drag function to drag frames by mouse
local currentDragObject
function Drag(frame, dragHandle)
    if currentDragObject then
        currentDragObject.ZIndex = -2
    end
    currentDragObject = frame
    currentDragObject.ZIndex = -1

    dragHandle = dragHandle or frame

    local dragging, dragInput, dragStart, startPos

    local function update(input)
        local delta = input.Position - dragStart
        frame.Position = UDim2.new(
            startPos.X.Scale,
            startPos.X.Offset + delta.X,
            startPos.Y.Scale,
            startPos.Y.Offset + delta.Y
        )
    end

    dragHandle.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
            dragStart = input.Position
            startPos = frame.Position

            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragging = false
                end
            end)
        end
    end)

    dragHandle.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement then
            dragInput = input
        end
    end)

    UserInputService.InputChanged:Connect(function(input)
        if input == dragInput and dragging then
            update(input)
        end
    end)
end

-- Click ripple effect on buttons
local function ClickEffect(button)
    spawn(function()
        if not button.ClipsDescendants then
            button.ClipsDescendants = true
        end

        local ripple = Instance.new("ImageLabel")
        ripple.Name = "Ripple"
        ripple.Parent = button
        ripple.BackgroundColor3 = Color3.new(1, 1, 1)
        ripple.BackgroundTransparency = 1
        ripple.ZIndex = 8
        ripple.Image = "rbxassetid://2708891598"
        ripple.ImageTransparency = 0.8
        ripple.ScaleType = Enum.ScaleType.Fit
        ripple.ImageColor3 = Color3.fromRGB(131, 132, 255)

        -- Position ripple based on mouse relative to button
        ripple.Position = UDim2.new(
            (Mouse.X - ripple.AbsolutePosition.X) / button.AbsoluteSize.X,
            0,
            (Mouse.Y - ripple.AbsolutePosition.Y) / button.AbsoluteSize.Y,
            0
        )

        TweenService:Create(
            ripple,
            TweenInfo.new(1),
            {Position = UDim2.new(-5.5, 0, -5.5, 0), Size = UDim2.new(12, 0, 12, 0)}
        ):Play()

        wait(0.25)

        TweenService:Create(ripple, TweenInfo.new(0.5), {ImageTransparency = 1}):Play()

        repeat wait() until ripple.ImageTransparency == 1
        ripple:Destroy()
    end)
end

-- Create the main ScreenGui container
local screenGui = Instance.new("ScreenGui")
screenGui.Name = HttpService:GenerateGUID(false)
screenGui.Parent = RunService:IsStudio() and LocalPlayer:WaitForChild("PlayerGui") or game:GetService("CoreGui")

-- Toggle visibility with LeftShift key
UserInputService.InputBegan:Connect(function(input, gameProcessed)
    if input.KeyCode == Enum.KeyCode.LeftShift and not gameProcessed then
        screenGui.Enabled = not screenGui.Enabled
    end
end)

-- Main function to create a new window
function UIManager:Window(title)
    local toggled = false
    self.windowCount = self.windowCount + 1

    -- Top bar frame
    local topFrame = Instance.new("Frame")
    topFrame.Name = "Top"
    topFrame.Parent = screenGui
    topFrame.BackgroundColor3 = Color3.fromRGB(43, 43, 43)
    topFrame.BorderSizePixel = 0
    topFrame.Position = UDim2.new(0, 25, 0, -30 + 36 * self.windowCount + 6 * self.windowCount)
    topFrame.Size = UDim2.new(0, 212, 0, 36)
    Drag(topFrame)

    -- Bottom line with gradient
    local windowLine = Instance.new("Frame")
    windowLine.Name = "WindowLine"
    windowLine.Parent = topFrame
    windowLine.BackgroundColor3 = Color3.new(1,1,1)
    windowLine.BorderSizePixel = 0
    windowLine.Position = UDim2.new(0, 0, 0, 34)
    windowLine.Size = UDim2.new(0, 212, 0, 2)

    local gradient = Instance.new("UIGradient")
    gradient.Name = "WindowLineGradient"
    gradient.Parent = windowLine
    gradient.Color = ColorSequence.new {
        ColorSequenceKeypoint.new(0.00, Color3.fromRGB(43, 43, 43)),
        ColorSequenceKeypoint.new(0.20, Color3.fromRGB(43, 43, 43)),
        ColorSequenceKeypoint.new(0.50, Color3.fromRGB(131, 132, 255)),
        ColorSequenceKeypoint.new(0.80, Color3.fromRGB(43, 43, 43)),
        ColorSequenceKeypoint.new(1.00, Color3.fromRGB(43, 43, 43))
    }

    -- Title label
    local header = Instance.new("TextLabel")
    header.Name = "Header"
    header.Parent = topFrame
    header.BackgroundTransparency = 1
    header.BorderSizePixel = 0
    header.Size = UDim2.new(0, 54, 0, 34)
    header.Font = Enum.Font.GothamSemibold
    header.Text = "   " .. tostring(title or "")
    header.TextColor3 = Color3.new(1,1,1)
    header.TextSize = 14
    header.TextXAlignment = Enum.TextXAlignment.Left

    -- Toggle button
    local toggleBtn = Instance.new("TextButton")
    toggleBtn.Name = "WindowToggle"
    toggleBtn.Parent = topFrame
    toggleBtn.BackgroundTransparency = 1
    toggleBtn.BorderSizePixel = 0
    toggleBtn.Position = UDim2.new(0.835, 0, 0, 0)
    toggleBtn.Size = UDim2.new(0, 34, 0, 34)
    toggleBtn.Font = Enum.Font.SourceSans
    toggleBtn.Text = ""
    toggleBtn.TextColor3 = Color3.new(0,0,0)
    toggleBtn.TextSize = 14

    local toggleImg = Instance.new("ImageLabel")
    toggleImg.Name = "WindowToggleImg"
    toggleImg.Parent = toggleBtn
    toggleImg.AnchorPoint = Vector2.new(0.5, 0.5)
    toggleImg.BackgroundTransparency = 1
    toggleImg.Position = UDim2.new(0.5, 0, 0.5, 0)
    toggleImg.Size = UDim2.new(0, 18, 0, 18)
    toggleImg.Image = "rbxassetid://3926305904"
    toggleImg.ImageRectOffset = Vector2.new(524, 764)
    toggleImg.ImageRectSize = Vector2.new(36, 36)
    toggleImg.Rotation = 180

    -- Bottom expandable frame
    local bottomFrame = Instance.new("Frame")
    bottomFrame.Name = "Bottom"
    bottomFrame.Parent = topFrame
    bottomFrame.BackgroundColor3 = Color3.fromRGB(38, 38, 38)
    bottomFrame.BorderSizePixel = 0
    bottomFrame.ClipsDescendants = true
    bottomFrame.Position = UDim2.new(0, 0, 1, 0)
    bottomFrame.Size = UDim2.new(0, 212, 0, 0)

    local listLayout = Instance.new("UIListLayout")
    listLayout.Name = "BottomLayout"
    listLayout.Parent = bottomFrame
    listLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center
    listLayout.SortOrder = Enum.SortOrder.LayoutOrder
    listLayout.Padding = UDim.new(0, 4)

    local paddingThing = Instance.new("Frame")
    paddingThing.Name = "PaddingThing"
    paddingThing.Parent = bottomFrame
    paddingThing.BackgroundColor3 = Color3.new(1,1,1)
    paddingThing.BorderSizePixel = 0
    paddingThing.Position = UDim2.new(0.26, 0, 0, 0)
    paddingThing.Size = UDim2.new(0, 100, 0, 0)

    local tweening = false
    local function toggleExpand()
        if tweening then return end
        toggled = not toggled
        tweening = true

        TweenService:Create(
            bottomFrame,
            TweenInfo.new(0.25, Enum.EasingStyle.Sine, Enum.EasingDirection.InOut),
            {Size = UDim2.new(0, 212, 0, toggled and listLayout.AbsoluteContentSize.Y + 4 or 0)}
        ):Play()

        TweenService:Create(
            toggleImg,
            TweenInfo.new(0.25, Enum.EasingStyle.Sine, Enum.EasingDirection.InOut),
            {Rotation = toggled and 0 or 180}
        ):Play()

        wait(0.25)
        tweening = false
    end

    local function updateSize()
        if tweening or not toggled then return end
        bottomFrame.Size = UDim2.new(0, 212, 0, listLayout.AbsoluteContentSize.Y + 4)
    end
    listLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(updateSize)
    toggleBtn.MouseButton1Click:Connect(toggleExpand)

    local windowAPI = {}

    function windowAPI:Label(text)
        local label = Instance.new("TextButton")
        label.Name = "Label"
        label.Parent = bottomFrame
        label.BackgroundColor3 = Color3.fromRGB(43, 43, 43)
        label.BorderSizePixel = 0
        label.Size = UDim2.new(0, 203, 0, 26)
        label.AutoButtonColor = false
        label.Font = Enum.Font.GothamSemibold
        label.Text = tostring(text or "")
        label.TextColor3 = Color3.new(1,1,1)
        label.TextSize = 14
        return label
    end

    function windowAPI:Button(text, callback)
        local container = Instance.new("Frame")
        local button = Instance.new("TextButton")

        container.Name = "ButtonObj"
        container.Parent = bottomFrame
        container.BackgroundColor3 = Color3.fromRGB(43, 43, 43)
        container.BorderSizePixel = 0
        container.Size = UDim2.new(0, 203, 0, 36)

        button.Name = "Button"
        button.Parent = container
        button.BackgroundTransparency = 1
        button.BorderSizePixel = 0
        button.Size = UDim2.new(0, 203, 0, 36)
        button.Font = Enum.Font.Gotham
        button.Text = "  " .. tostring(text or "")
        button.TextColor3 = Color3.new(1,1,1)
        button.TextSize = 14
        button.TextXAlignment = Enum.TextXAlignment.Left

        button.MouseEnter:Connect(function()
            TweenService:Create(container, TweenInfo.new(0.25), {BackgroundColor3 = Color3.fromRGB(55, 55, 55)}):Play()
        end)
        button.MouseLeave:Connect(function()
            TweenService:Create(container, TweenInfo.new(0.25), {BackgroundColor3 = Color3.fromRGB(43, 43, 43)}):Play()
        end)
        button.MouseButton1Click:Connect(function()
            spawn(function()
                ClickEffect(button)
            end)
            callback()
        end)
    end

    function windowAPI:Toggle(text, id, defaultValue, callback, flagsTable)
        flagsTable = flagsTable or self.flags
        id = id or HttpService:GenerateGUID(false)
        defaultValue = defaultValue or false
        callback = callback or function() end

        flagsTable[id] = defaultValue

        local container = Instance.new("Frame")
        local toggleText = Instance.new("TextButton")
        local toggleStatus = Instance.new("Frame")
        local toggleCorner = Instance.new("UICorner")

        container.Name = "ToggleObj"
        container.Parent = bottomFrame
        container.BackgroundColor3 = Color3.fromRGB(43, 43, 43)
        container.BorderSizePixel = 0
        container.Size = UDim2.new(0, 203, 0, 36)

        toggleText.Name = "ToggleText"
        toggleText.Parent = container
        toggleText.BackgroundTransparency = 1
        toggleText.BorderSizePixel = 0
        toggleText.Size = UDim2.new(0, 203, 0, 36)
        toggleText.Font = Enum.Font.Gotham
        toggleText.Text = "  " .. tostring(text or "")
        toggleText.TextColor3 = Color3.new(1,1,1)
        toggleText.TextSize = 14
        toggleText.TextXAlignment = Enum.TextXAlignment.Left

        toggleStatus.Name = "ToggleStatus"
        toggleStatus.Parent = container
        toggleStatus.AnchorPoint = Vector2.new(0, 0.5)
        toggleStatus.BackgroundColor3 = defaultValue and Color3.fromRGB(14, 255, 110) or Color3.fromRGB(255, 44, 44)
        toggleStatus.BorderSizePixel = 0
        toggleStatus.Position = UDim2.new(0.847, 0, 0.5, 0)
        toggleStatus.Size = UDim2.new(0, 24, 0, 24)

        toggleCorner.CornerRadius = UDim.new(0, 4)
        toggleCorner.Name = "ToggleStatusRound"
        toggleCorner.Parent = toggleStatus

        if defaultValue then
            callback(true)
        end

        toggleText.MouseEnter:Connect(function()
            TweenService:Create(container, TweenInfo.new(0.25), {BackgroundColor3 = Color3.fromRGB(55, 55, 55)}):Play()
        end)
        toggleText.MouseLeave:Connect(function()
            TweenService:Create(container, TweenInfo.new(0.25), {BackgroundColor3 = Color3.fromRGB(43, 43, 43)}):Play()
        end)

        toggleText.MouseButton1Click:Connect(function()
            flagsTable[id] = not flagsTable[id]
            spawn(function()
                TweenService:Create(
                    toggleStatus,
                    TweenInfo.new(0.25),
                    {BackgroundColor3 = flagsTable[id] and Color3.fromRGB(14, 255, 110) or Color3.fromRGB(255, 44, 44)}
                ):Play()
            end)
            spawn(function()
                ClickEffect(toggleText)
            end)
            callback(flagsTable[id])
        end)
    end

    function windowAPI:Slider(text, id, minValue, maxValue, callback, defaultValue, flagsTable)
        minValue = minValue or 0
        maxValue = maxValue or 100
        id = id or HttpService:GenerateGUID(false)
        callback = callback or function() end
        flagsTable = flagsTable or self.flags
        local dragging = false
        flagsTable[id] = defaultValue or minValue

        local sliderFrame = Instance.new("Frame")
        local sliderTextBtn = Instance.new("TextButton")
        local sliderBack = Instance.new("Frame")
        local sliderBackCorner = Instance.new("UICorner")
        local sliderPart = Instance.new("Frame")
        local sliderPartCorner = Instance.new("UICorner")
        local sliderValueLabel = Instance.new("TextLabel")

        sliderFrame.Name = "SliderObj"
        sliderFrame.Parent = bottomFrame
        sliderFrame.BackgroundColor3 = Color3.fromRGB(43, 43, 43)
        sliderFrame.BorderSizePixel = 0
        sliderFrame.Size = UDim2.new(0, 203, 0, 36)

        sliderTextBtn.Name = "SliderText"
        sliderTextBtn.Parent = sliderFrame
        sliderTextBtn.BackgroundTransparency = 1
        sliderTextBtn.BorderSizePixel = 0
        sliderTextBtn.Size = UDim2.new(0, 203, 0, 36)
        sliderTextBtn.Font = Enum.Font.Gotham
        sliderTextBtn.Text = "  " .. tostring(text or "")
        sliderTextBtn.TextColor3 = Color3.new(1,1,1)
        sliderTextBtn.TextSize = 14
        sliderTextBtn.TextXAlignment = Enum.TextXAlignment.Left

        sliderBack.Name = "SliderBack"
        sliderBack.Parent = sliderFrame
        sliderBack.BackgroundColor3 = Color3.fromRGB(38, 38, 38)
        sliderBack.BorderSizePixel = 0
        sliderBack.Position = UDim2.new(0.57, 0, 0.68, 0)
        sliderBack.Size = UDim2.new(0, 80, 0, 7)

        sliderBackCorner.CornerRadius = UDim.new(0, 4)
        sliderBackCorner.Parent = sliderBack

        sliderPart.Name = "SliderPart"
        sliderPart.Parent = sliderBack
        sliderPart.BackgroundColor3 = Color3.fromRGB(131, 133, 255)
        sliderPart.BorderSizePixel = 0
        sliderPart.Size = UDim2.new(((defaultValue or minValue) - minValue) / (maxValue - minValue), 0, 1, 0)

        sliderPartCorner.CornerRadius = UDim.new(0, 4)
        sliderPartCorner.Parent = sliderPart

        sliderValueLabel.Name = "SliderValue"
        sliderValueLabel.Parent = sliderFrame
        sliderValueLabel.BackgroundTransparency = 1
        sliderValueLabel.BorderSizePixel = 0
        sliderValueLabel.Position = UDim2.new(0.57, 0, 0.17, 0)
        sliderValueLabel.Size = UDim2.new(0, 80, 0, 16)
        sliderValueLabel.Font = Enum.Font.Code
        sliderValueLabel.Text = tostring(defaultValue or minValue)
        sliderValueLabel.TextColor3 = Color3.new(1,1,1)
        sliderValueLabel.TextSize = 14

        if defaultValue and defaultValue ~= minValue then
            callback(defaultValue)
        end

        local function updateSlider(input)
            local relativePos = math.clamp((input.Position.X - sliderBack.AbsolutePosition.X) / sliderBack.AbsoluteSize.X, 0, 1)
            local newSize = UDim2.new(relativePos, 0, 1, 0)
            sliderPart:TweenSize(newSize, Enum.EasingDirection.InOut, Enum.EasingStyle.Linear, 0.05, true)

            local value = math.floor(relativePos * (maxValue - minValue) + minValue)
            sliderValueLabel.Text = tostring(value)
            flagsTable[id] = value
            callback(value)
        end

        sliderTextBtn.InputBegan:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 then
                TweenService:Create(sliderPart, TweenInfo.new(0.15), {BackgroundColor3 = Color3.new(1,1,1)}):Play()
                updateSlider(input)
                dragging = true
            end
        end)

        sliderTextBtn.InputEnded:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 then
                TweenService:Create(sliderPart, TweenInfo.new(0.15), {BackgroundColor3 = Color3.fromRGB(131, 133, 255)}):Play()
                dragging = false
            end
        end)

        UserInputService.InputChanged:Connect(function(input)
            if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
                updateSlider(input)
            end
        end)
    end

    return windowAPI
end

return UIManager
