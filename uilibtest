-- IreXion UI Library (single-file loader-compatible)
-- Usage: local Library = loadstring(game:HttpGet("https://your-host/IreXion.lua"))()

local Library = {}
Library.__index = Library

-- Services
local Players = game:GetService("Players")
local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")

-- Utils
local function Make(Class, Props)
    local obj = Instance.new(Class)
    if Props then
        for k,v in pairs(Props) do
            if k ~= "Parent" then
                pcall(function() obj[k] = v end)
            end
        end
        if Props.Parent then
            obj.Parent = Props.Parent
        end
    end
    return obj
end

local function Tween(obj, props, time, style, dir)
    time = time or 0.2
    style = style or Enum.EasingStyle.Quad
    dir = dir or Enum.EasingDirection.Out
    local ok, t = pcall(function()
        return TweenService:Create(obj, TweenInfo.new(time, style, dir), props)
    end)
    if ok and t then t:Play() end
    return t
end

local function clamp(n, a, b) return math.max(a, math.min(b, n)) end

-- Default theme
local DEFAULT_THEME = Color3.fromRGB(0,255,0)
local LOCAL_PLAYER = Players.LocalPlayer

-- Create top-level library instance (returned when loaded)
local root = setmetatable({}, Library)

-- Primary API: AddGui
function Library:AddGui(opts)
    opts = opts or {}
    local self = setmetatable({}, Library)
    self.ThemeColor = opts.ThemeColor or DEFAULT_THEME
    self.ToggleKey = opts.ToggleKey or Enum.KeyCode.RightShift
    self.Title = opts.Title or {"IreXion", "UI Library"}

    -- Build ScreenGui
    local playerGui = LOCAL_PLAYER:FindFirstChildOfClass("PlayerGui") or LOCAL_PLAYER:WaitForChild("PlayerGui")
    local screenGui = Make("ScreenGui", {
        Name = "IreXion_UI",
        Parent = playerGui,
        ResetOnSpawn = false,
    })
    self.ScreenGui = screenGui

    -- Main frame
    local main = Make("Frame", {
        Name = "Main",
        Parent = screenGui,
        AnchorPoint = Vector2.new(0.5,0.5),
        Position = UDim2.new(0.5, 0, 0.5, 0),
        Size = UDim2.new(0, 560, 0, 360),
        BackgroundColor3 = Color3.fromRGB(18,18,18),
        BorderSizePixel = 0,
    })
    Make("UICorner", {Parent = main, CornerRadius = UDim.new(0,8)})
    Make("UIStroke", {Parent = main, Color = Color3.fromRGB(35,35,35), Transparency = 0.7, Thickness = 1})

    -- Top bar
    local top = Make("Frame", {
        Parent = main,
        Size = UDim2.new(1,0,0,46),
        Position = UDim2.new(0,0,0,0),
        BackgroundColor3 = Color3.fromRGB(20,20,20),
        BorderSizePixel = 0,
    })
    Make("UICorner", {Parent = top, CornerRadius = UDim.new(0,8)})
    local titleText = Make("TextLabel", {
        Parent = top,
        BackgroundTransparency = 1,
        Position = UDim2.new(0,12,0,0),
        Size = UDim2.new(1,-24,1,0),
        Text = (type(self.Title)=="table" and (tostring(self.Title[1]).." - "..tostring(self.Title[2])) or tostring(self.Title)),
        TextColor3 = Color3.fromRGB(255,255,255),
        Font = Enum.Font.GothamBold,
        TextSize = 18,
        TextXAlignment = Enum.TextXAlignment.Left,
    })
    local accent = Make("Frame", {
        Parent = top,
        Size = UDim2.new(1,-20,0,4),
        Position = UDim2.new(0,10,1,-8),
        BackgroundColor3 = self.ThemeColor,
        BorderSizePixel = 0,
    })
    Make("UICorner", {Parent = accent, CornerRadius = UDim.new(0,4)})

    -- Left column (tabs)
    local left = Make("Frame", {
        Parent = main,
        Position = UDim2.new(0,0,0,46),
        Size = UDim2.new(0,110,1,-46),
        BackgroundColor3 = Color3.fromRGB(16,16,16),
        BorderSizePixel = 0,
    })
    Make("UICorner", {Parent = left, CornerRadius = UDim.new(0,8)})
    local tabsScroller = Make("ScrollingFrame", {
        Parent = left,
        Position = UDim2.new(0,6,0,6),
        Size = UDim2.new(1,-12,1,-12),
        BackgroundTransparency = 1,
        ScrollBarThickness = 6,
    })
    local tabsLayout = Make("UIListLayout", {Parent = tabsScroller, SortOrder = Enum.SortOrder.LayoutOrder, Padding = UDim.new(0,6)})
    tabsLayout.Padding = UDim.new(0,6)

    -- Right column (content)
    local right = Make("Frame", {
        Parent = main,
        Position = UDim2.new(0,122,0,46),
        Size = UDim2.new(1,-122,1,-56),
        BackgroundColor3 = Color3.fromRGB(18,18,18),
        BorderSizePixel = 0,
    })
    Make("UICorner", {Parent = right, CornerRadius = UDim.new(0,6)})
    local rightLayout = Make("UIListLayout", {Parent = right, SortOrder = Enum.SortOrder.LayoutOrder, Padding = UDim.new(0,8)})
    rightLayout.Padding = UDim.new(0,8)

    -- Small footer for bind text (inside main)
    local footer = Make("Frame", {
        Parent = main,
        Position = UDim2.new(0,0,1,-30),
        Size = UDim2.new(1,0,0,30),
        BackgroundTransparency = 1,
    })
    local footerText = Make("TextLabel", {
        Parent = footer,
        BackgroundTransparency = 1,
        Size = UDim2.new(1, -24, 1, 0),
        Position = UDim2.new(0, 12, 0, 0),
        Text = "RightShift to toggle UI",
        TextColor3 = Color3.fromRGB(200,200,200),
        Font = Enum.Font.Gotham,
        TextSize = 12,
        TextXAlignment = Enum.TextXAlignment.Left,
    })

    -- State
    self.ScreenGui = screenGui
    self.Main = main
    self.TabsHolder = tabsScroller
    self.ContentHolder = right
    self.Tabs = {}
    self.Open = true

    -- Show/hide with ToggleKey
    local function setOpen(bool, animate)
        self.Open = bool
        animate = (animate==nil) and true or animate
        if animate then
            if bool then
                Tween(main, {Position = UDim2.new(0.5,0,0.5,0), Size = UDim2.new(0,560,0,360)}, 0.28)
            else
                Tween(main, {Position = UDim2.new(0.5,0,1.1,0), Size = UDim2.new(0,360,0,240)}, 0.22)
            end
        else
            if bool then main.Position = UDim2.new(0.5,0,0.5,0) else main.Position = UDim2.new(0.5,0,1.1,0) end
        end
    end

    setOpen(true, false)

    UserInputService.InputBegan:Connect(function(input, gpe)
        if gpe then return end
        if input.KeyCode == self.ToggleKey then
            setOpen(not self.Open, true)
        end
    end)

    -- Draggable top
    do
        local dragging, startPos, startMouse
        top.InputBegan:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 then
                dragging = true
                startMouse = input.Position
                startPos = main.Position
                input.Changed:Connect(function()
                    if input.UserInputState == Enum.UserInputState.End then
                        dragging = false
                    end
                end)
            end
        end)
        top.InputChanged:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseMovement then
                RunService:BindToRenderStep("IreXionDrag", Enum.RenderPriority.Camera.Value, function()
                    if dragging and startMouse and startPos then
                        local delta = UserInputService:GetMouseLocation() - startMouse
                        main.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
                    end
                end)
            end
        end)
        top.InputEnded:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseMovement then
                RunService:UnbindFromRenderStep("IreXionDrag")
            end
        end)
    end

    -- Create Tabs
    function self:AddTab(name)
        name = tostring(name or "Tab")
        local tab = {Name = name, Categories = {}}

        -- tab button
        local btn = Make("TextButton", {
            Parent = self.TabsHolder,
            Size = UDim2.new(1, -8, 0, 36),
            BackgroundColor3 = Color3.fromRGB(24,24,24),
            BorderSizePixel = 0,
            Text = name,
            TextColor3 = Color3.fromRGB(240,240,240),
            Font = Enum.Font.Gotham,
            TextSize = 14,
        })
        Make("UICorner", {Parent = btn, CornerRadius = UDim.new(0,6)})
        local selectedBar = Make("Frame", {Parent = btn, Size = UDim2.new(0,4,1,0), Position = UDim2.new(0,0,0,0), BackgroundColor3 = self.ThemeColor})
        selectedBar.Visible = false

        -- content panel for this tab
        local content = Make("Frame", {
            Parent = self.ContentHolder,
            Size = UDim2.new(1,-12,0,260),
            BackgroundTransparency = 1,
            Visible = false,
        })
        local layout = Make("UIListLayout", {Parent = content, SortOrder = Enum.SortOrder.LayoutOrder, Padding = UDim.new(0,8)})
        layout.Padding = UDim.new(0,8)

        btn.MouseButton1Click:Connect(function()
            -- deselect others
            for i,v in ipairs(self.Tabs) do
                if v.Button then
                    v.Button.BackgroundColor3 = Color3.fromRGB(24,24,24)
                    if v.SelectedBar then v.SelectedBar.Visible = false end
                    if v.Content then v.Content.Visible = false end
                end
            end
            btn.BackgroundColor3 = Color3.fromRGB(34,34,34)
            selectedBar.Visible = true
            content.Visible = true
        end)

        -- auto-select first tab
        if #self.Tabs == 0 then
            btn.BackgroundColor3 = Color3.fromRGB(34,34,34)
            selectedBar.Visible = true
            content.Visible = true
        end

        tab.Button = btn
        tab.SelectedBar = selectedBar
        tab.Content = content
        tab.AddCategory = function(_, categoryName)
            local cat = {}
            cat.Name = categoryName or "Category"
            cat.Elements = {}

            local cframe = Make("Frame", {
                Parent = content,
                Size = UDim2.new(1,0,0,120),
                BackgroundColor3 = Color3.fromRGB(24,24,24),
                BorderSizePixel = 0,
            })
            Make("UICorner", {Parent = cframe, CornerRadius = UDim.new(0,6)})
            local ctitle = Make("TextLabel", {
                Parent = cframe,
                BackgroundTransparency = 1,
                Position = UDim2.new(0,12,0,6),
                Size = UDim2.new(1,-24,0,18),
                Text = categoryName,
                TextColor3 = Color3.fromRGB(220,220,220),
                Font = Enum.Font.GothamBold,
                TextSize = 14,
                TextXAlignment = Enum.TextXAlignment.Left,
            })

            local inner = Make("Frame", {
                Parent = cframe,
                Position = UDim2.new(0,12,0,30),
                Size = UDim2.new(1,-24,1,-36),
                BackgroundTransparency = 1,
            })
            local innerLayout = Make("UIListLayout", {Parent = inner, SortOrder = Enum.SortOrder.LayoutOrder, Padding = UDim.new(0,6)})
            innerLayout.Padding = UDim.new(0,6)

            -- ELEMENTS API
            function cat:AddButton(text, callback)
                text = tostring(text or "Button")
                callback = callback or function() end
                local btnf = Make("TextButton", {
                    Parent = inner,
                    Size = UDim2.new(1,0,0,32),
                    BackgroundColor3 = Color3.fromRGB(28,28,28),
                    BorderSizePixel = 0,
                    Text = text,
                    TextColor3 = Color3.fromRGB(255,255,255),
                    Font = Enum.Font.Gotham,
                    TextSize = 13,
                })
                Make("UICorner", {Parent = btnf, CornerRadius = UDim.new(0,6)})
                btnf.MouseButton1Click:Connect(function()
                    Tween(btnf, {BackgroundColor3 = Color3.fromRGB(36,36,36)}, 0.08)
                    delay(0.06, function() Tween(btnf, {BackgroundColor3 = Color3.fromRGB(28,28,28)}, 0.12) end)
                    pcall(callback)
                end)
                table.insert(cat.Elements, btnf)
                return btnf
            end

            function cat:AddToggle(text, default, callback)
                text = tostring(text or "Toggle")
                default = default and true or false
                callback = callback or function() end
                local holder = Make("Frame", {
                    Parent = inner,
                    Size = UDim2.new(1,0,0,32),
                    BackgroundTransparency = 1,
                })
                local lbl = Make("TextLabel", {
                    Parent = holder,
                    BackgroundTransparency = 1,
                    Position = UDim2.new(0,6,0,0),
                    Size = UDim2.new(1,-70,1,0),
                    Text = text,
                    TextColor3 = Color3.fromRGB(230,230,230),
                    Font = Enum.Font.Gotham,
                    TextSize = 13,
                    TextXAlignment = Enum.TextXAlignment.Left,
                })
                local box = Make("Frame", {
                    Parent = holder,
                    Position = UDim2.new(1,-46,0,6),
                    Size = UDim2.new(0,36,0,20),
                    BackgroundColor3 = Color3.fromRGB(34,34,34),
                    BorderSizePixel = 0,
                })
                Make("UICorner", {Parent = box, CornerRadius = UDim.new(0,4)})
                local dot = Make("Frame", {Parent = box, Size = UDim2.new(0,16,0,16), Position = UDim2.new(0,2,0,2), BackgroundColor3 = Color3.fromRGB(40,40,40)})
                Make("UICorner", {Parent = dot, CornerRadius = UDim.new(0,4)})
                local state = default
                local function update()
                    if state then
                        Tween(box, {BackgroundColor3 = self.ThemeColor}, 0.18)
                        Tween(dot, {Position = UDim2.new(1,-18,0,2), BackgroundColor3 = Color3.fromRGB(30,30,30)}, 0.18)
                    else
                        Tween(box, {BackgroundColor3 = Color3.fromRGB(34,34,34)}, 0.18)
                        Tween(dot, {Position = UDim2.new(0,2,0,2), BackgroundColor3 = Color3.fromRGB(40,40,40)}, 0.18)
                    end
                end
                box.InputBegan:Connect(function()
                    state = not state
                    pcall(callback, state)
                    update()
                end)
                update()
                table.insert(cat.Elements, holder)
                return {
                    Set = function(_, v) state = not not v; update() end,
                    Get = function() return state end,
                }
            end

            function cat:AddBox(placeholder, callback)
                placeholder = tostring(placeholder or "")
                callback = callback or function() end
                local holder = Make("Frame", {
                    Parent = inner,
                    Size = UDim2.new(1,0,0,32),
                    BackgroundTransparency = 1,
                })
                local box = Make("TextBox", {
                    Parent = holder,
                    Size = UDim2.new(1,0,1,0),
                    BackgroundColor3 = Color3.fromRGB(28,28,28),
                    Text = "",
                    PlaceholderText = placeholder,
                    TextColor3 = Color3.fromRGB(230,230,230),
                    Font = Enum.Font.Gotham,
                    TextSize = 13,
                })
                Make("UICorner", {Parent = box, CornerRadius = UDim.new(0,6)})
                box.FocusLost:Connect(function(enter)
                    if enter then
                        pcall(callback, box.Text)
                    end
                end)
                table.insert(cat.Elements, holder)
                return box
            end

            function cat:AddLabel(text)
                text = tostring(text or "")
                local lbl = Make("TextLabel", {
                    Parent = inner,
                    Size = UDim2.new(1,0,0,20),
                    BackgroundTransparency = 1,
                    Text = text,
                    TextColor3 = Color3.fromRGB(220,220,220),
                    Font = Enum.Font.Gotham,
                    TextSize = 13,
                    TextXAlignment = Enum.TextXAlignment.Left,
                })
                table.insert(cat.Elements, lbl)
                return lbl
            end

            function cat:AddDualLabel(tbl)
                tbl = tbl or {"L", "R"}
                local holder = Make("Frame", {
                    Parent = inner,
                    Size = UDim2.new(1,0,0,20),
                    BackgroundTransparency = 1,
                })
                local leftlbl = Make("TextLabel", {
                    Parent = holder,
                    Size = UDim2.new(0.5,-6,1,0),
                    Position = UDim2.new(0,6,0,0),
                    BackgroundTransparency = 1,
                    Text = tostring(tbl[1]),
                    TextColor3 = Color3.fromRGB(200,200,200),
                    Font = Enum.Font.Gotham,
                    TextSize = 12,
                    TextXAlignment = Enum.TextXAlignment.Left,
                })
                local rightlbl = Make("TextLabel", {
                    Parent = holder,
                    Size = UDim2.new(0.5,-6,1,0),
                    Position = UDim2.new(0.5,0,0,0),
                    BackgroundTransparency = 1,
                    Text = tostring(tbl[2] or ""),
                    TextColor3 = Color3.fromRGB(200,200,200),
                    Font = Enum.Font.Gotham,
                    TextSize = 12,
                    TextXAlignment = Enum.TextXAlignment.Right,
                })
                table.insert(cat.Elements, holder)
                return {Left = leftlbl, Right = rightlbl}
            end

            function cat:AddSlider(name, min, max, default, callback)
                name = tostring(name or "Slider")
                min = tonumber(min) or 0
                max = tonumber(max) or 100
                callback = callback or function() end
                default = clamp(tonumber(default) or min, min, max)

                local holder = Make("Frame", {Parent = inner, Size = UDim2.new(1,0,0,36), BackgroundTransparency = 1})
                local tit = Make("TextLabel", {
                    Parent = holder,
                    BackgroundTransparency = 1,
                    Position = UDim2.new(0,6,0,0),
                    Size = UDim2.new(1,-12,0,16),
                    Text = tostring(name).." - "..tostring(default),
                    TextColor3 = Color3.fromRGB(220,220,220),
                    Font = Enum.Font.Gotham,
                    TextSize = 13,
                    TextXAlignment = Enum.TextXAlignment.Center,
                })

                local track = Make("Frame", {
                    Parent = holder,
                    Position = UDim2.new(0,8,0,18),
                    Size = UDim2.new(1,-16,0,10),
                    BackgroundColor3 = Color3.fromRGB(28,28,28),
                    BorderSizePixel = 0,
                })
                Make("UICorner", {Parent = track, CornerRadius = UDim.new(0,6)})
                local fill = Make("Frame", {
                    Parent = track,
                    Position = UDim2.new(0,0,0,0),
                    Size = UDim2.new((default - min)/(max - min), 0, 1, 0),
                    BackgroundColor3 = self.ThemeColor,
                    BorderSizePixel = 0,
                })
                Make("UICorner", {Parent = fill, CornerRadius = UDim.new(0,6)})

                local dragging = false
                local function setValueFromPos(x)
                    local absX = clamp((x - track.AbsolutePosition.X) / track.AbsoluteSize.X, 0, 1)
                    local val = math.floor((min + (max - min) * absX) + 0.5)
                    fill.Size = UDim2.new(absX, 0, 1, 0)
                    tit.Text = tostring(name).." - "..tostring(val)
                    pcall(callback, val)
                end

                track.InputBegan:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseButton1 then
                        dragging = true
                        setValueFromPos(input.Position.X)
                    end
                end)
                track.InputEnded:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseButton1 then dragging = false end
                end)
                track.InputChanged:Connect(function(input)
                    if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
                        setValueFromPos(input.Position.X)
                    end
                end)
                table.insert(cat.Elements, holder)
                return {
                    Set = function(_, v)
                        v = clamp(v, min, max)
                        local pct = (v - min) / (max - min)
                        fill.Size = UDim2.new(pct, 0, 1, 0)
                        tit.Text = tostring(name).." - "..tostring(v)
                    end,
                    Get = function() 
                        local pct = fill.Size.X.Scale
                        return math.floor(min + (max - min) * pct + 0.5)
                    end,
                }
            end

            function cat:AddDropdown(name, list, callback)
                name = tostring(name or "Dropdown")
                list = list or {}
                callback = callback or function() end

                local holder = Make("Frame", {
                    Parent = inner,
                    Size = UDim2.new(1,0,0,36),
                    BackgroundTransparency = 1,
                })
                local btn = Make("TextButton", {
                    Parent = holder,
                    Size = UDim2.new(1,0,0,32),
                    BackgroundColor3 = Color3.fromRGB(28,28,28),
                    BorderSizePixel = 0,
                    Text = name.."  V",
                    TextColor3 = Color3.fromRGB(240,240,240),
                    Font = Enum.Font.Gotham,
                    TextSize = 13,
                })
                Make("UICorner", {Parent = btn, CornerRadius = UDim.new(0,6)})

                local menu = Make("Frame", {
                    Parent = self.ScreenGui,
                    Size = UDim2.new(0,220,0,0),
                    Position = UDim2.new(0.5, -110, 0.5, -40),
                    BackgroundColor3 = Color3.fromRGB(22,22,22),
                    BorderSizePixel = 0,
                    Visible = false,
                })
                Make("UICorner", {Parent = menu, CornerRadius = UDim.new(0,6)})
                local menuScroller = Make("ScrollingFrame", {
                    Parent = menu,
                    Size = UDim2.new(1,0,1,0),
                    BackgroundTransparency = 1,
                    ScrollBarThickness = 6,
                })
                local menuLayout = Make("UIListLayout", {Parent = menuScroller, SortOrder = Enum.SortOrder.LayoutOrder, Padding = UDim.new(0,4)})
                menuLayout.Padding = UDim.new(0,4)

                local function populate()
                    menuScroller:ClearAllChildren()
                    Make("UIListLayout", {Parent = menuScroller, SortOrder = Enum.SortOrder.LayoutOrder, Padding = UDim.new(0,4)})
                    for i, v in ipairs(list) do
                        local it = Make("TextButton", {
                            Parent = menuScroller,
                            Size = UDim2.new(1, -8, 0, 28),
                            Position = UDim2.new(0,4,0,0),
                            BackgroundColor3 = Color3.fromRGB(30,30,30),
                            BorderSizePixel = 0,
                            Text = tostring(v),
                            TextColor3 = Color3.fromRGB(230,230,230),
                            Font = Enum.Font.Gotham,
                            TextSize = 13,
                        })
                        Make("UICorner", {Parent = it, CornerRadius = UDim.new(0,6)})
                        it.MouseButton1Click:Connect(function()
                            btn.Text = tostring(v).."  V"
                            menu.Visible = false
                            pcall(callback, tostring(v))
                        end)
                    end
                end
                populate()

                btn.MouseButton1Click:Connect(function()
                    menu.Position = UDim2.new(0.5, -110, 0.5, -40)
                    menu.Size = UDim2.new(0,220,0,math.min(#list * 32 + 10, 220))
                    menu.Visible = not menu.Visible
                end)

                -- close menu on click elsewhere
                self.ScreenGui.InputBegan:Connect(function(inp)
                    if inp.UserInputType == Enum.UserInputType.MouseButton1 then
                        -- if click not on menu or button, hide
                        local mpos = UserInputService:GetMouseLocation()
                        local inMenu = (mpos.X >= menu.AbsolutePosition.X and mpos.X <= menu.AbsolutePosition.X + menu.AbsoluteSize.X and mpos.Y >= menu.AbsolutePosition.Y and mpos.Y <= menu.AbsolutePosition.Y + menu.AbsoluteSize.Y)
                        local inBtn = (mpos.X >= btn.AbsolutePosition.X and mpos.X <= btn.AbsolutePosition.X + btn.AbsoluteSize.X and mpos.Y >= btn.AbsolutePosition.Y and mpos.Y <= btn.AbsolutePosition.Y + btn.AbsoluteSize.Y)
                        if not inMenu and not inBtn then menu.Visible = false end
                    end
                end)

                table.insert(cat.Elements, holder)
                return {
                    SetList = function(_, t) list = t or {}; populate() end,
                }
            end

            function cat:AddBind(name, defaultKey, callback)
                name = tostring(name or "Bind")
                defaultKey = defaultKey or self.ToggleKey
                callback = callback or function() end

                local holder = Make("Frame", {
                    Parent = inner,
                    Size = UDim2.new(1,0,0,32),
                    BackgroundTransparency = 1,
                })
                local lbl = Make("TextLabel", {
                    Parent = holder,
                    BackgroundTransparency = 1,
                    Position = UDim2.new(0,6,0,0),
                    Size = UDim2.new(1,-120,1,0),
                    Text = name,
                    TextColor3 = Color3.fromRGB(220,220,220),
                    Font = Enum.Font.Gotham,
                    TextSize = 13,
                    TextXAlignment = Enum.TextXAlignment.Left,
                })
                local keyBtn = Make("TextButton", {
                    Parent = holder,
                    Position = UDim2.new(1,-108,0,4),
                    Size = UDim2.new(0,100,0,24),
                    BackgroundColor3 = Color3.fromRGB(28,28,28),
                    BorderSizePixel = 0,
                    Text = tostring(defaultKey.Name or tostring(defaultKey)),
                    TextColor3 = Color3.fromRGB(230,230,230),
                    Font = Enum.Font.Gotham,
                    TextSize = 12,
                })
                Make("UICorner", {Parent = keyBtn, CornerRadius = UDim.new(0,6)})

                local currentKey = defaultKey
                keyBtn.MouseButton1Click:Connect(function()
                    keyBtn.Text = "..."
                    local conn
                    conn = UserInputService.InputBegan:Connect(function(input, gpe)
                        if gpe then return end
                        if input.UserInputType == Enum.UserInputType.Keyboard then
                            currentKey = input.KeyCode
                            keyBtn.Text = tostring(currentKey.Name)
                            conn:Disconnect()
                        end
                    end)
                end)

                -- bind to key
                UserInputService.InputBegan:Connect(function(input, gpe)
                    if gpe then return end
                    if input.KeyCode == currentKey then
                        pcall(callback)
                    end
                end)

                table.insert(cat.Elements, holder)
                return {
                    Set = function(_, key)
                        currentKey = key
                        keyBtn.Text = tostring((key and key.Name) or tostring(key))
                    end,
                    Get = function() return currentKey end,
                }
            end

            -- done building category
            table.insert(tab.Categories, cat)
            return cat
        end

        table.insert(self.Tabs, tab)
        return tab
    end

    -- Notification (popup with yes/no)
    function self:Notify(text, callback)
        callback = callback or function() end
        local notif = Make("Frame", {
            Parent = self.ScreenGui,
            Size = UDim2.new(0,420,0,100),
            Position = UDim2.new(0.5,-210,0.2,0),
            BackgroundColor3 = Color3.fromRGB(24,24,24),
            BorderSizePixel = 0,
        })
        Make("UICorner", {Parent = notif, CornerRadius = UDim.new(0,6)})
        local txt = Make("TextLabel", {
            Parent = notif,
            Size = UDim2.new(1,-24,1,-44),
            Position = UDim2.new(0,12,0,12),
            BackgroundTransparency = 1,
            Text = tostring(text or ""),
            TextColor3 = Color3.fromRGB(230,230,230),
            Font = Enum.Font.Gotham,
            TextSize = 14,
            TextWrapped = true,
            TextXAlignment = Enum.TextXAlignment.Left,
        })
        local yes = Make("TextButton", {
            Parent = notif,
            Size = UDim2.new(0,100,0,28),
            Position = UDim2.new(1,-116,1,-36),
            BackgroundColor3 = self.ThemeColor,
            Text = "Yes",
            TextColor3 = Color3.fromRGB(20,20,20),
            Font = Enum.Font.GothamBold,
            TextSize = 13,
        })
        Make("UICorner", {Parent = yes, CornerRadius = UDim.new(0,6)})
        local no = Make("TextButton", {
            Parent = notif,
            Size = UDim2.new(0,100,0,28),
            Position = UDim2.new(1,-226,1,-36),
            BackgroundColor3 = Color3.fromRGB(36,36,36),
            Text = "No",
            TextColor3 = Color3.fromRGB(230,230,230),
            Font = Enum.Font.Gotham,
            TextSize = 13,
        })
        Make("UICorner", {Parent = no, CornerRadius = UDim.new(0,6)})

        yes.MouseButton1Click:Connect(function()
            Tween(notif, {Position = UDim2.new(0.5,-210,0.05,0)}, 0.12)
            Tween(notif, {Size = UDim2.new(0,420,0,80)}, 0.12)
            delay(0.08, function() notif:Destroy(); pcall(callback, true) end)
        end)
        no.MouseButton1Click:Connect(function()
            notif:Destroy(); pcall(callback, false)
        end)
        return notif
    end

    -- return the GUI object (API: AddTab, Notify exists)
    return self
end

-- Return library factory function
return root
