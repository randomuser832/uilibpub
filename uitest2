-- Modern Roblox UI Library (clean, rounded, animated)
local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")

local UI = {}

local ACCENT_COLOR = Color3.fromRGB(0, 170, 255)
local BG_COLOR = Color3.fromRGB(30, 30, 35)
local HEADER_COLOR = Color3.fromRGB(25, 25, 30)
local TOGGLE_BG = Color3.fromRGB(55, 55, 65)
local SLIDER_BG = Color3.fromRGB(55, 55, 65)
local DROPDOWN_BG = Color3.fromRGB(40, 40, 45)

-- Tween helper
local function tween(inst, props, dur, style, dir)
    dur = dur or 0.25
    style = style or Enum.EasingStyle.Quad
    dir = dir or Enum.EasingDirection.Out
    local tweenInfo = TweenInfo.new(dur, style, dir)
    local t = TweenService:Create(inst, tweenInfo, props)
    t:Play()
    return t
end

-- Drag functionality
local function makeDraggable(frame)
    local dragging, dragInput, mousePos, framePos

    frame.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
            mousePos = input.Position
            framePos = frame.Position
            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragging = false
                end
            end)
        end
    end)

    frame.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement then
            dragInput = input
        end
    end)

    UserInputService.InputChanged:Connect(function(input)
        if dragging and input == dragInput then
            local delta = input.Position - mousePos
            local newPos = UDim2.new(
                math.clamp(framePos.X.Scale, 0, 1),
                math.clamp(framePos.X.Offset + delta.X, 0, workspace.CurrentCamera.ViewportSize.X - frame.AbsoluteSize.X),
                math.clamp(framePos.Y.Scale, 0, 1),
                math.clamp(framePos.Y.Offset + delta.Y, 0, workspace.CurrentCamera.ViewportSize.Y - frame.AbsoluteSize.Y)
            )
            frame.Position = newPos
        end
    end)
end

-- Rounded corner helper
local function addCorner(inst, radius)
    radius = radius or 6
    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(0, radius)
    corner.Parent = inst
    return corner
end

-- Create Toggle
local function createToggle(parent, text, callback)
    local container = Instance.new("Frame")
    container.Size = UDim2.new(1, 0, 0, 32)
    container.BackgroundTransparency = 1
    container.Parent = parent

    local label = Instance.new("TextLabel")
    label.Size = UDim2.new(1, -50, 1, 0)
    label.Position = UDim2.new(0, 12, 0, 0)
    label.BackgroundTransparency = 1
    label.Text = text
    label.TextColor3 = Color3.fromRGB(230, 230, 230)
    label.Font = Enum.Font.Gotham
    label.TextSize = 18
    label.TextXAlignment = Enum.TextXAlignment.Left
    label.Parent = container

    local toggleBtn = Instance.new("Frame")
    toggleBtn.Size = UDim2.new(0, 36, 0, 20)
    toggleBtn.Position = UDim2.new(1, -44, 0.5, -10)
    toggleBtn.BackgroundColor3 = TOGGLE_BG
    toggleBtn.Parent = container
    toggleBtn.ClipsDescendants = true
    toggleBtn.Active = true
    toggleBtn.AutoButtonColor = false
    toggleBtn.Name = "ToggleBg"
    addCorner(toggleBtn, 10)

    local circle = Instance.new("Frame")
    circle.Size = UDim2.new(0, 16, 0, 16)
    circle.Position = UDim2.new(0, 2, 0, 2)
    circle.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    circle.Parent = toggleBtn
    circle.Name = "Circle"
    addCorner(circle, 8)

    local toggled = false
    local function setToggle(state)
        toggled = state
        if toggled then
            tween(toggleBtn, {BackgroundColor3 = ACCENT_COLOR}, 0.3)
            tween(circle, {Position = UDim2.new(0, 18, 0, 2)}, 0.3)
        else
            tween(toggleBtn, {BackgroundColor3 = TOGGLE_BG}, 0.3)
            tween(circle, {Position = UDim2.new(0, 2, 0, 2)}, 0.3)
        end
        if callback then
            callback(toggled)
        end
    end

    toggleBtn.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            setToggle(not toggled)
        end
    end)

    return container, setToggle
end

-- Create Slider
local function createSlider(parent, text, min, max, default, callback)
    local container = Instance.new("Frame")
    container.Size = UDim2.new(1, 0, 0, 54)
    container.BackgroundTransparency = 1
    container.Parent = parent

    local label = Instance.new("TextLabel")
    label.Size = UDim2.new(1, 0, 0, 20)
    label.BackgroundTransparency = 1
    label.Text = text .. ": " .. tostring(default)
    label.TextColor3 = Color3.fromRGB(230, 230, 230)
    label.Font = Enum.Font.Gotham
    label.TextSize = 18
    label.TextXAlignment = Enum.TextXAlignment.Left
    label.Parent = container

    local sliderFrame = Instance.new("Frame")
    sliderFrame.Size = UDim2.new(1, 0, 0, 24)
    sliderFrame.Position = UDim2.new(0, 0, 0, 28)
    sliderFrame.BackgroundColor3 = SLIDER_BG
    sliderFrame.Parent = container
    addCorner(sliderFrame, 8)

    local fill = Instance.new("Frame")
    fill.Size = UDim2.new((default - min) / (max - min), 0, 1, 0)
    fill.BackgroundColor3 = ACCENT_COLOR
    fill.Parent = sliderFrame
    addCorner(fill, 8)

    local dragging = false

    local function updateSlider(x)
        local relativeX = math.clamp(x - sliderFrame.AbsolutePosition.X, 0, sliderFrame.AbsoluteSize.X)
        local value = min + (relativeX / sliderFrame.AbsoluteSize.X) * (max - min)
        fill.Size = UDim2.new((value - min) / (max - min), 0, 1, 0)
        local displayValue = math.floor(value * 100) / 100
        label.Text = text .. ": " .. tostring(displayValue)
        if callback then
            callback(displayValue)
        end
    end

    sliderFrame.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
            updateSlider(input.Position.X)
        end
    end)

    sliderFrame.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = false
        end
    end)

    UserInputService.InputChanged:Connect(function(input)
        if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
            updateSlider(input.Position.X)
        end
    end)

    return container
end

-- Create Dropdown (single or multi-select)
-- Usage: isMultiSelect = boolean (false = single select, true = multi select)
local function createDropdown(parent, text, options, callback, isMultiSelect)
    local container = Instance.new("Frame")
    container.Size = UDim2.new(1, 0, 0, 35)
    container.BackgroundTransparency = 1
    container.Parent = parent

    local label = Instance.new("TextLabel")
    label.Size = UDim2.new(1, -40, 0, 20)
    label.BackgroundTransparency = 1
    label.Text = text
    label.TextColor3 = Color3.fromRGB(230, 230, 230)
    label.Font = Enum.Font.Gotham
    label.TextSize = 18
    label.TextXAlignment = Enum.TextXAlignment.Left
    label.Parent = container

    local button = Instance.new("TextButton")
    button.Size = UDim2.new(1, 0, 0, 30)
    button.Position = UDim2.new(0, 0, 0, 25)
    button.BackgroundColor3 = DROPDOWN_BG
    button.TextColor3 = Color3.fromRGB(230, 230, 230)
    button.Text = "Select..."
    button.Font = Enum.Font.Gotham
    button.TextSize = 18
    button.Parent = container
    button.AutoButtonColor = true
    addCorner(button, 8)

    local dropdownFrame = Instance.new("Frame")
    dropdownFrame.Size = UDim2.new(1, 0, 0, 0)
    dropdownFrame.Position = UDim2.new(0, 0, 0, 55)
    dropdownFrame.BackgroundColor3 = DROPDOWN_BG
    dropdownFrame.ClipsDescendants = true
    dropdownFrame.Parent = container
    dropdownFrame.ZIndex = 10
    addCorner(dropdownFrame, 8)

    local dropdownOpen = false
    local optionsList = {}
    local selectedOptions = {}

    local function closeDropdown()
        dropdownOpen = false
        tween(dropdownFrame, {Size = UDim2.new(1, 0, 0, 0)}, 0.25)
    end

    local function openDropdown()
        dropdownOpen = true
        local height = #options * 32
        tween(dropdownFrame, {Size = UDim2.new(1, 0, 0, height)}, 0.25)
    end

    button.MouseButton1Click:Connect(function()
        if dropdownOpen then
            closeDropdown()
        else
            openDropdown()
        end
    end)

    local function updateButtonText()
        if isMultiSelect then
            if #selectedOptions == 0 then
                button.Text = "Select..."
            else
                button.Text = table.concat(selectedOptions, ", ")
            end
        else
            button.Text = selectedOptions[1] or "Select..."
        end
    end

    for i, option in ipairs(options) do
        local optionBtn = Instance.new("TextButton")
        optionBtn.Size = UDim2.new(1, 0, 0, 32)
        optionBtn.Position = UDim2.new(0, 0, 0, (i - 1) * 32)
        optionBtn.BackgroundColor3 = DROPDOWN_BG
        optionBtn.TextColor3 = Color3.fromRGB(230, 230, 230)
        optionBtn.Text = option
        optionBtn.Font = Enum.Font.Gotham
        optionBtn.TextSize = 18
        optionBtn.Parent = dropdownFrame
        optionBtn.AutoButtonColor = true
        addCorner(optionBtn, 4)

        local checkMark = Instance.new("TextLabel")
        checkMark.Size = UDim2.new(0, 24, 1, 0)
        checkMark.Position = UDim2.new(1, -28, 0, 0)
        checkMark.BackgroundTransparency = 1
        checkMark.Text = "âœ“"
        checkMark.TextColor3 = ACCENT_COLOR
        checkMark.Font = Enum.Font.GothamBold
        checkMark.TextSize = 22
        checkMark.Visible = false
        checkMark.Parent = optionBtn

        optionBtn.MouseButton1Click:Connect(function()
            if isMultiSelect then
                if checkMark.Visible then
                    checkMark.Visible = false
                    for i, v in ipairs(selectedOptions) do
                        if v == option then
                            table.remove(selectedOptions, i)
                            break
                        end
                    end
                else
                    checkMark.Visible = true
                    table.insert(selectedOptions, option)
                end
            else
                -- single select mode closes dropdown on select
                for _, btn in ipairs(optionsList) do
                    btn.CheckMark.Visible = false
                end
                checkMark.Visible = true
                selectedOptions = {option}
                closeDropdown()
            end
            updateButtonText()
            if callback then
                callback(isMultiSelect and selectedOptions or selectedOptions[1])
            end
        end)

        optionBtn.CheckMark = checkMark
        table.insert(optionsList, optionBtn)
    end

    return container, function(selected)
        -- setter
        selectedOptions = {}
        if isMultiSelect then
            if type(selected) == "table" then
                for _, sel in ipairs(selected) do
                    for _, btn in ipairs(optionsList) do
                        if btn.Text == sel then
                            btn.CheckMark.Visible = true
                            table.insert(selectedOptions, sel)
                        else
                            btn.CheckMark.Visible = false
                        end
                    end
                end
            end
        else
            for _, btn in ipairs(optionsList) do
                if btn.Text == selected then
                    btn.CheckMark.Visible = true
                    selectedOptions = {selected}
                else
                    btn.CheckMark.Visible = false
                end
            end
        end
        updateButtonText()
    end
end

-- Create notification with subtle shadow and fade animation
local function notify(text, duration)
    duration = duration or 3
    local playerGui = game:GetService("Players").LocalPlayer:WaitForChild("PlayerGui")

    local notifFrame = Instance.new("Frame")
    notifFrame.Size = UDim2.new(0, 280, 0, 40)
    notifFrame.Position = UDim2.new(1, -290, 1, -60)
    notifFrame.BackgroundColor3 = BG_COLOR
    notifFrame.BorderSizePixel = 0
    notifFrame.AnchorPoint = Vector2.new(0, 1)
    notifFrame.Parent = playerGui
    notifFrame.ZIndex = 30
    addCorner(notifFrame, 8)

    -- Drop shadow effect
    local shadow = Instance.new("ImageLabel")
    shadow.Size = UDim2.new(1, 10, 1, 10)
    shadow.Position = UDim2.new(0, -5, 0, -5)
    shadow.BackgroundTransparency = 1
    shadow.Image = "rbxassetid://1316045217" -- soft shadow png (optional)
    shadow.ImageColor3 = Color3.new(0, 0, 0)
    shadow.ImageTransparency = 0.85
    shadow.ZIndex = 25
    shadow.Parent = notifFrame

    local label = Instance.new("TextLabel")
    label.Size = UDim2.new(1, -20, 1, 0)
    label.Position = UDim2.new(0, 12, 0, 0)
    label.BackgroundTransparency = 1
    label.Text = text
    label.TextColor3 = Color3.fromRGB(230, 230, 230)
    label.Font = Enum.Font.Gotham
    label.TextSize = 18
    label.TextXAlignment = Enum.TextXAlignment.Left
    label.TextYAlignment = Enum.TextYAlignment.Center
    label.ZIndex = 30
    label.Parent = notifFrame

    notifFrame.Position = UDim2.new(1, 320, 1, -60)
    tween(notifFrame, {Position = UDim2.new(1, -290, 1, -60)}, 0.3)

    delay(duration, function()
        tween(notifFrame, {Position = UDim2.new(1, 320, 1, -60)}, 0.3)
        wait(0.3)
        notifFrame:Destroy()
    end)
end

function UI:CreateWindow(title)
    local playerGui = game:GetService("Players").LocalPlayer:WaitForChild("PlayerGui")

    local screenGui = Instance.new("ScreenGui")
    screenGui.Name = "ModernCleanUI"
    screenGui.Parent = playerGui
    screenGui.ResetOnSpawn = false

    local mainFrame = Instance.new("Frame")
    mainFrame.Size = UDim2.new(0, 420, 0, 460)
    mainFrame.Position = UDim2.new(0.5, -210, 0.5, -230)
    mainFrame.BackgroundColor3 = BG_COLOR
    mainFrame.BorderSizePixel = 0
    mainFrame.AnchorPoint = Vector2.new(0.5, 0.5)
    mainFrame.Parent = screenGui
    addCorner(mainFrame, 12)
    makeDraggable(mainFrame)

    -- Header
    local header = Instance.new("Frame")
    header.Size = UDim2.new(1, 0, 0, 38)
    header.BackgroundColor3 = HEADER_COLOR
    header.BorderSizePixel = 0
    header.Parent = mainFrame
    addCorner(header, 12)

    local titleLabel = Instance.new("TextLabel")
    titleLabel.Size = UDim2.new(1, -60, 1, 0)
    titleLabel.Position = UDim2.new(0, 20, 0, 0)
    titleLabel.BackgroundTransparency = 1
    titleLabel.Text = title or "Modern Clean UI"
    titleLabel.Font = Enum.Font.GothamBold
    titleLabel.TextSize = 24
    titleLabel.TextColor3 = Color3.fromRGB(230, 230, 230)
    titleLabel.TextXAlignment = Enum.TextXAlignment.Left
    titleLabel.TextYAlignment = Enum.TextYAlignment.Center
    titleLabel.Parent = header

    -- Minimize Button: circle with dash inside
    local minimizeBtn = Instance.new("TextButton")
    minimizeBtn.Size = UDim2.new(0, 32, 0, 32)
    minimizeBtn.Position = UDim2.new(1, -44, 0.5, -16)
    minimizeBtn.BackgroundColor3 = ACCENT_COLOR
    minimizeBtn.Text = ""
    minimizeBtn.AutoButtonColor = false
    minimizeBtn.Parent = header
    addCorner(minimizeBtn, 16)

    local dash = Instance.new("Frame")
    dash.Size = UDim2.new(0, 14, 0, 3)
    dash.Position = UDim2.new(0.5, -7, 0.5, -1.5)
    dash.BackgroundColor3 = Color3.fromRGB(30, 30, 35)
    dash.Parent = minimizeBtn
    addCorner(dash, 1.5)

    -- Content container
    local contentFrame = Instance.new("ScrollingFrame")
    contentFrame.Size = UDim2.new(1, 0, 1, -38)
    contentFrame.Position = UDim2.new(0, 0, 0, 38)
    contentFrame.BackgroundTransparency = 1
    contentFrame.BorderSizePixel = 0
    contentFrame.ScrollBarThickness = 7
    contentFrame.CanvasSize = UDim2.new(0, 0, 0, 0)
    contentFrame.AutomaticCanvasSize = Enum.AutomaticSize.Y
    contentFrame.Parent = mainFrame

    local listLayout = Instance.new("UIListLayout")
    listLayout.Parent = contentFrame
    listLayout.SortOrder = Enum.SortOrder.LayoutOrder
    listLayout.Padding = UDim.new(0, 14)

    local minimized = false
    minimizeBtn.MouseButton1Click:Connect(function()
        minimized = not minimized
        if minimized then
            tween(contentFrame, {Size = UDim2.new(1, 0, 0, 0)}, 0.3)
            tween(mainFrame, {Size = UDim2.new(0, 420, 0, 38)}, 0.3)
        else
            tween(mainFrame, {Size = UDim2.new(0, 420, 0, 460)}, 0.3)
            tween(contentFrame, {Size = UDim2.new(1, 0, 1, -38)}, 0.3)
        end
    end)

    local windowAPI = {}

    function windowAPI:AddToggle(text, callback)
        local toggle, setter = createToggle(contentFrame, text, callback)
        return setter
    end

    function windowAPI:AddSlider(text, min, max, default, callback)
        return createSlider(contentFrame, text, min, max, default, callback)
    end

    -- Single-select dropdown by default; pass true as last param for multi-select
    function windowAPI:AddDropdown(text, options, callback, multiSelect)
        local dropdown, setter = createDropdown(contentFrame, text, options, callback, multiSelect)
        return setter
    end

    function windowAPI:Notify(text, duration)
        notify(text, duration)
    end

    windowAPI.MainFrame = mainFrame
    windowAPI.ScreenGui = screenGui

    return windowAPI
end

return UI
